---
title: Preprocesamiento de datos
lang: es
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

```{r paquetes, echo = F}
library(knitr)
library(kableExtra)
```

## Ejercicios Resueltos

Para la realización de esta práctica se requieren los paquetes `readr` y [`dplyr`](https://aprendeconalf.es/manual-r/06-preprocesamiento.html#el-paquete-dplyr) de la colección de paquetes [`tidyverse`](https://aprendeconalf.es/manual-r/06-preprocesamiento.html#la-colecci%C3%B3n-de-paquetes-tidyverse).

```{r}
library(tidyverse) 
# Incluye los siguientes paquetes:
# - readr: para la lectura de ficheros csv. 
# - dplyr: para el preprocesamiento y manipulación de datos.
```

:::{#exr-preprocesamiento-1}
La siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.

```{r, echo = F}
df1 <- data.frame(
    Mes = c("Enero", "Febrero", "Marzo", "Abril"),
    Ingresos = c(45000, 41500, 51200, 49700),
    Gastos = c(33400, 35400, 35600, 36300), 
    Impuestos = c(6450, 6300, 7100, 6850)
    )
df1[-4, ] |>
    kable() |>
    kable_styling(full_width = T)
```

a.  Crear un data frame con los datos de la tabla.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    df <- data.frame(
        Mes = c("Enero", "Febrero", "Marzo"),
        Ingresos = c(45000, 41500, 51200),
        Gastos = c(33400, 35400, 35600)
        )
    df 
    ```
    :::

a.  Añadir una nueva columna con los siguientes impuestos pagados.

    ```{r, echo = F}
    df1[-4, ] |>
        select(Mes, Impuestos) |>
        kable() |>
        kable_styling(full_width = F)
    ```

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Con las funciones básicas de R.

    ```{r}
    df$Impuestos <- c(6450, 6300, 7100)
    df
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Con las funciones del paquete `dplyr`.

    ```{r}
    df <- df |>
        mutate(Impuestos = c(6450, 6300, 7100))
    df
    ```
    :::

a.  Añadir una nueva fila con los siguientes datos de Abril. 

    ```{r, echo = F}
    df1[4, ] |>
        kable(row.names = F) |>
        kable_styling(full_width = T)
    ```

    :::{.callout-tip collapse="true"}
    ## Solución 1 
    Con las funciones básicas de R.

    ```{r}
    df <- rbind(df, list(Mes = "Abril", Ingresos = 49700, Gastos = 36300, Impuestos = 6850))
    df
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2 
    Con las funciones del paquete `dplyr`.

    ```{r, echo = F}
    df <- df[-4, ]
    ```

    ```{r}
    df <- df |>
        add_row(Mes = "Abril", Ingresos = 49700, Gastos = 36300, Impuestos = 6850)
    df
    ```
    :::

a.  Cambiar los ingresos de Marzo por 50400. 

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df[3, "Ingresos"] <- 50400
    df
    ```
    :::

a.  Crear una nueva columna con los beneficios de cada mes (ingresos - gastos - impuestos).

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Con las funciones básicas de R.

    ```{r}
    df$Beneficios <- df$Ingresos - df$Gastos - df$Impuestos
    df
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Con las funciones del paquete `dplyr`.

    ```{r}
    df <- df |>
        mutate(Beneficios = Ingresos - Gastos - Impuestos)
    df
    ```
    :::

a.  Crear una nueva columna con el factor `Balance` con dos posibles categorías: `positivo` si ha habido beneficios y `negativo` si ha habido pérdidas.

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Con las funciones básicas de R.

    ```{r}
    df$Balance <- cut(df$Beneficios, breaks = c(-Inf, 0, Inf), labels = c("negativo", "positivo"))
    df
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Con las funciones del paquete `dplyr`.

    ```{r}
    df <- df |>
        mutate(Balance = cut(Beneficios, breaks = c(-Inf, 0, Inf), labels = c("negativo", "positivo")))
    df
    ```
    :::

a.  Filtrar el conjunto de datos para quedarse con los nombres de los meses y los beneficios de los meses con balance positivo. 

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Con las funciones básicas de R.

    ```{r}
    df[df$Balance == "positivo", c("Mes", "Beneficios")]
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Con las funciones del paquete `dplyr`.

    ```{r}
    df |>
        filter(Balance == "positivo") |> 
        select(Mes, Beneficios)
    ```
    :::
:::

:::{#exr-preprocesamiento-2}
El fichero [`colesterol.csv`](datos/colesterol.csv) contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.

a.  Crear un data frame con los datos de todos los pacientes del estudio a partir del fichero [`colesterol.csv`](datos/colesterol.csv).

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Con las funciones básicas de R.

    ```{r}
    df <- read.csv("https://raw.githubusercontent.com/asalber/estadistica-practicas-r/main/datos/colesterol.csv")
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Con la función [`read_csv`](https://readr.tidyverse.org/reference/read_delim.html) del paquete del paquete [`readr`](https://readr.tidyverse.org/index.html).

    ```{r}
    df <- read_csv("https://raw.githubusercontent.com/asalber/estadistica-practicas-r/main/datos/colesterol.csv")
    ```
    :::

a.  Mostrar el contenido del data frame.

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Con las funciones básicas de R.

    ```{r}
    df 
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Con la función [`glimpse`](https://dplyr.tidyverse.org/reference/glimpse.html?q=read_csv#undefined) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html). Esta función muestra las columnas del data frame en filas, de manera que permite ver todas las columnas de un data frame cuando este tiene muchas columnas.

    ```{r}
    glimpse(df)
    ```
    :::

a.  Crear una nueva columna con el índice de masa corporal, usando la siguiente fórmula 

    $$
    \mbox{IMC} = \frac{\mbox{Peso (kg)}}{\mbox{Altura (cm)}^2}
    $$

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df <- df |>
        mutate(imc = round(peso/altura^2))
    df
    ```
    :::

a.  Crear una nueva columna con la variable `obesidad` recodificando la columna `imc` en las siguientes categorías.

    | Rango IMC | Categoría |
    |:-|:-|
    |Menor de 18.5 | Bajo peso |
    |De 18.5 a 24.5 | Saludable |
    |De 24.5 a 30 | Sobrepeso |
    |Mayor de 30 | Obeso |

    :::{.callout-tip collapse="true"}
    ## Solución 

    ```{r}
    df <- df |>
        mutate(Obesidad = cut(imc, breaks = c(0, 18.5, 24.5, 30, Inf), labels = c("Bajo peso", "Saludable", "Sobrepeso", "Obeso")))
    df
    ```
    :::

a.  Seleccionar las columnas `nombre`, `sexo` y `edad`.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        select(nombre, sexo, edad)
    ```
    :::

a.  Anonimizar los datos eliminando la columna `nombre`.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        select(-nombre)
    ```
    :::

a.  Reordenar las columnas poniendo la columna `sexo` antes que la columna `edad`.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        select(nombre, sexo, edad, everything())
    ```
    :::

a.  Filtrar el data frame para quedarse con las mujeres.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        filter(sexo == "M")
    ```
    :::

a.  Filtrar el data frame para quedarse con los hombres mayores de 30 años.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        filter( sexo == "H" & edad > 30)
    ```
    :::

a.  Filtrar el data frame para eliminar las filas con datos perdidos en la columna `colesterol`.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        filter(!is.na(colesterol))
    ```
    :::

a.  Ordenar el data frame según la columna `nombre`.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        arrange(nombre)
    ```
    :::

a.  Ordenar el data frame ascendentemente por la columna `sexo` y descendentemente por la columna `edad`.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df |>
        arrange(sexo, desc(edad))
    ```
    :::
:::

:::{#exr-preprocesamiento-3}
El fichero [`notas-curso2.csv`](datos/notas-curso2.csv) contiene las notas de las asignaturas de un curso en varios grupos de alumnos.

a.  Crear un data frame con los datos del curso a partir del fichero [`notas-curso2.csv`](datos/notas-curso2.csv).

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df <- read_csv("https://raw.githubusercontent.com/asalber/estadistica-practicas-r/main/datos/notas-curso2.csv")
    df
    ```
    :::

a.  Convertir el data frame a formato largo. 

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df_largo <- df |> pivot_longer(notaA:notaE, names_to = "Asignatura", values_to = "Nota")
    df_largo
    ```
    :::

a.  Crear una nueva columna con la variable `calificación` que contenga las calificaciones de cada asignatura.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df_largo <- df_largo |>
        mutate(Califiación = cut(Nota, breaks = c(0, 4.99, 6.99, 8.99, 10), labels = c("SS", "AP", "NT", "SB")))
    df_largo
    ```
    :::

a.  Filtrar el conjunto de datos para obtener las asignaturas y las notas de las mujeres del grupo A, ordenadas de mayor a menor.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df_largo |>
        filter(sexo == "Mujer", grupo == "A") |>
        select(Asignatura, Nota) |>
        arrange(desc(Nota))
    ```
    :::
:::

## Ejercicios Propuestos

:::{#exr-preprocesaimento-5}
La siguiente tabla recoge las notas de los alumnos de un curso con dos asignaturas. 

| Alumno | Sexo | Física | Química |
|:-|:-:|:-:|:-:|
| Carlos | H | 6.7 | 8.1 |
| María | M | 7.2 | 9.5 |
| Carmen | M | 5.5 | 5 |
| Pedro | H |  | 4.5 |
| Luis | H | 3.5 | 5 |
| Sara | M | 6.2 | 4 |

a.  Definir cuatro vectores con el nombre, el sexo y las notas de Física y Química.

    :::{.callout-tip collapse="true"}
    ## Solución 
    ```{r}
    nombre <- c("Carlos", "María", "Carmen", "Pedro", "Luis", "Sara")
    sexo <- c("H", "M", "M", "H", "H", "M")
    fisica <- c(6.7, 7.2, 5.5, NA, 3.5, 6.2)
    quimica <- c(8.1, 9.5, 5, 4.5, 5, 4)
    ```
    :::

a.  Convertir el sexo en un factor y mostrar sus niveles.

    :::{.callout-tip collapse="true"}
    ## Solución 
    ```{r}
    sexo <- factor(sexo)
    levels(sexo)
    ```
    :::

a.  Crear un data frame con el nombre, sexo y las notas de Física y Química.

    :::{.callout-tip collapse="true"}
    ## Solución 
    ```{r}
    df <- data.frame(nombre, sexo, fisica, quimica)
    df
    ```
    :::

a.  Crear una nueva columna con la nota media de Física y Química.

    :::{.callout-tip collapse="true"}
    ## Solución 
    ```{r}
    df$media <- (df$fisica + df$quimica) / 2
    df
    ```
    :::

a.  Crear una nueva columna booleana `aprobado` que tenga el valor `TRUE` si la media es mayor o igual que 5 y `FALSE` en caso contrario.

    :::{.callout-tip collapse="true"}
    ## Solución 
    ```{r}
    df$aprobado <- df$media >= 5
    df
    ```
    :::

a.  Filtrar el data frame para quedarse con el nombre y la media de las mujeres que han aprobado.

    :::{.callout-tip collapse="true"}
    ## Solución 
    ```{r}
    df[df$sexo == "M" & df$media >= 5, c("nombre", "media")]
    ```
    :::
:::


:::{#exr-preprocesamiento-5}
Se ha diseñado un ensayo clínico aleatorizado, doble-ciego y controlado con placebo, para estudiar el efecto de dos alternativas terapéuticas en el control de la hipertensión
arterial. Se han reclutado 100 pacientes hipertensos y estos han sido distribuidos aleatoriamente en tres grupos de tratamiento. A uno de los grupos (control) se le administró un placebo, a otro grupo se le administró un inhibidor de la enzima conversora de la angiotensina (IECA) y al otro un tratamiento combinado de un diurético y un Antagonista del Calcio. Las variables respuesta final fueron las presiones arteriales sistólica y diastólica.

Los datos con las claves de aleatorización han sido introducidos en una base de datos que reside en la central de aleatorización,
mientras que los datos clínicos han sido archivados en dos archivos distintos, uno para cada uno de los dos centros
participantes en el estudio.

Las variables almacenadas en estos archivos clínicos son las
siguientes:

- CLAVE: Clave de aleatorización
- NOMBRE: Iniciales del paciente
- F\_NACIM: Fecha de Nacimiento
- F\_INCLUS: Fecha de inclusión
- SEXO: Sexo (0: Hombre 1: Mujer)
- ALTURA: Altura en cm.
- PESO: Peso en Kg.
- PAD\_INI: Presión diastólica basal (inicial)
- PAD\_FIN: Presión diastólica final
- PAS\_INI: Presión sistólica basal (inicial)
- PAS\_FIN:  Presión sistólica final

El archivo de claves de aleatorización contiene sólo dos variables.

- CLAVE: Clave de aleatorización
- FARMACO: Fármaco administrado (0: Placebo, 1: IECA,  2:Ca Antagonista + diurético)

a.  Crear un data frame con los datos de los pacientes del hospital A (fichero de csv [datos-hospital-a.csv](datos/hipertension/datos-hospital-a.csv)).

a.  Crear un data frame con los datos de los pacientes del hospital B (fichero csv [datos-hospital-b.csv](datos/hipertension/datos-hospital-b.csv)).

a.  Fusionar los datos de los dos hospitales en un nuevo data frame.

    :::{.callout-note collapse="true"}
    ## Ayuda
    Para fusionar las filas de dos data frames con las mismas columnas usar la función [`rbind`](https://aprendeconalf.es/manual-r/03-tipos-datos-estructurados.html#a%C3%B1adir-elementos-a-un-data-frame).
    :::

a.  Crear un data frame con los datos de las claves de aleatorización (fichero csv [claves-aleatorizacion.csv](datos/hipertension/claves-aleatorizacion.csv))

a.  Fusionar el data frame con los datos clínicos y el data frame con claves de aleatorización en un nuevo data frame.

    :::{.callout-note collapse="true"}
    ## Ayuda
    Para fusionar las columnas de dos data frames usando una misma columna como clave en ambos data frames usar la función [`left_join`](https://dtplyr.tidyverse.org/reference/left_join.dtplyr_step.html) del paquete `dplyr`.
    :::

a.  Convertir en un factor el sexo.

a.  Crear una nueva columna para la evolución de la presión arterial diastólica restando las columnas `PAS_FIN` y `PAS_FIN`.
:::