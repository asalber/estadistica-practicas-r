---
title: Tipos y estructuras de datos
knitr: 
    opts_chunk: 
      R.options:
        warning: false
lang: es
---

Esta práctica contiene ejercicios que muestran cómo trabajar con los tipos y estructuras de datos en R. En concreto, las estructuras de datos que se utilizan son

- Vectores.
- Factores.
- Matrices.
- Listas.
- Dataframes.

## Ejercicios Resueltos

Para la realización de esta práctica se requieren los siguientes paquetes.

```r
library(tidyverse) 
# Incluye los siguientes paquetes:
# - readr: para la lectura de ficheros csv. 
# - dplyr: para el preprocesamiento y manipulación de datos.
```

:::{#exr-vectores-1}
Realizar las siguientes operaciones con vectores.

a.  Crear un vector con los números del 1 al 10.

    :::{.callout-tip collapse="true"}
    ## Solución

    :::{.panel-tabset}
    ## Función c

    La función `c()` permite combinar elementos en un vector. Los elementos se introducen separados por comas.

    ```{r}
    numeros <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    numeros
    ```

    ## Operador :

    El operador `inicio:fin` permite crear un vector con la secuencia de números enteros desde el número `inicio` hasta el número `fin`.

    ```{r}
    numeros <- 1:10
    numeros
    ```
    :::
    :::

a.  Mostrar el número de elementos del vector anterior.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    length(numeros)
    ```
    :::

a.  Crear un vector con los números pares del 1 al 10.

    :::{.callout-tip collapse="true"}
    ## Solución

    :::{.panel-tabset}
    ## Función c

    ```{r}
    pares <- c(2, 4, 6, 8, 10)
    pares
    ```

    ## Función seq

    La función `seq(inicio, fin, salto)` permite crear un vector con la secuencia de números enteros desde el número `inicio` hasta el número `fin` con un salto de `salto`.

    ```{r}
    pares <- seq(2, 10, by = 2)
    pares
    ```
    :::
    :::

a.  Crear un vector con el cuadrado de los elementos del vector anterior.

    :::{.callout-tip collapse="true"}
    ## Solución

    El operador `^` permite elevar un número a otro. Cuando se aplica a un vector, eleva cada elemento del vector al número indicado.

    ```{r}
    cuadrados <- pares^2
    cuadrados
    ```
    :::

a.  Crear un vector con 5 números aleatorios entre 1 y 10.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `sample(vector, n)` permite seleccionar `n` elementos aleatorios de `vector`. El muestreo es sin reemplazamiento.

    ```{r}
    aleatorios <- sample(1:10, 5)
    aleatorios
    ```
    :::

a.  Crear un vector booleano con los números del vector anterior que son pares.

    :::{.callout-tip collapse="true"}
    ## Solución

    El operador `%%` permite calcular el resto de la división entera de dos números. Si el resto es 0, el número es par. Y el operador `==` permite comparar dos vectores elemento a elemento.

    ```{r}
    par <- aleatorios %% 2 == 0
    par
    ```
    :::

a.  Crear un vector con 100 números aleatorios entre 0 y 1.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `runif(n, min, max)` permite generar `n` números aleatorios entre `min` y `max`.

    ```{r}
    aleatorios2 <- runif(100, 0, 1)
    aleatorios2
    ```
    :::

a.  Ordenar el vector anterior de menor a mayor.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `sort(vector)` permite ordenar los elementos de un vector de menor a mayor.

    ```{r}
    sort(aleatorios2)
    ```
    :::

a.  Ordenar el vector anterior de mayor a menor.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `sort(vector, decreasing = TRUE)` permite ordenar los elementos de un vector de mayor a menor.

    ```{r}
    sort(aleatorios2, decreasing = TRUE)
    ```
    :::

a.  Crear un vector con los días laborables de la semana.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    dias_laborables <- c("Lunes", "Martes", "Miércoles", "Jueves", "Viernes")
    dias_laborables
    ```
    :::

a.  Añadir los días del fin de semana al vector anterior y guardar el resultado en una nueva variable.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    dias <- c(dias_laborables, "Sábado", "Domingo")
    dias
    ```
    :::

a.  Acceder al tercer elemento del vector.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    dias_laborables[3]
    ```
    :::

a.  Seleccionar los días pares del vector.

    :::{.callout-tip collapse="true"}
    ## Solución

    :::{.panel-tabset}
    ## Índices numéricos

    ```{r}
    dias[c(2, 4, 6)]
    ```

    ## Índices numéricos negativos

    ```{r}
    dias[-c(1, 3, 5, 7)]
    ```

    ## Índices lógicos

    ```{r}
    dias[c(FALSE, TRUE)]
    ```
    :::
    :::

a.  Concatenar los elementos del vector en una cadena de texto.

    :::{.callout-tip collapse="true"}
    ## Solución
    La función `paste(vector, collapse = " ")` permite concatenar los elementos de un vector en una cadena de texto separados por un espacio.

    ```{r}
    paste(dias, collapse = " ")
    ```
    :::

a.  Concatenar los elementos del vector en una cadena de texto separados por comas.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    semana <- paste(dias, collapse = ", ")
    semana
    ```
    :::

a.  Dividir la cadena anterior en subcadenas usando como separador la coma.

    :::{.callout-tip collapse="true"}
    ## Solución
    La función `strsplit(cadena, separador)` permite dividir una cadena de texto en subcadenas usando como separador el valor de `separador`.

    ```{r}
    strsplit(semana, ", ")
    ```
    :::
:::

:::{#exr-factores-1}
Se ha tomado una muestra de alumnos de una clase y se ha recogido la información sobre el sexo de los alumnos obteniendo los siguientes datos:

$$
\mbox{Mujer, Hombre, Mujer, Hombre, Mujer, Mujer, Hombre, Hombre}
$$

a.  Crear un vector con los datos de la muestra.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    sexo <- c("Mujer", "Hombre", "Mujer", "Hombre", "Mujer", "Mujer", "Hombre", "Hombre")
    sexo
    ```
    :::

a.  Convertir el vector anterior en un factor.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `factor(vector, labels)` permite convertir `vector` en un factor con los niveles o categorías especificados en `labels`. Si no se indica `labels`, los niveles se toman de los elementos del vector y se ordenan alfabéticamente.

    ```{r}
    sexo <- factor(sexo)
    sexo
    ```
    :::

a.  Mostrar los niveles del factor.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `levels(factor)` permite mostrar los niveles del factor `factor`.

    ```{r}
    levels(sexo)
    ```
    :::

a.  Reordenar los niveles del factor para que la categoría "Mujer" sea la primera.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    sexo <- factor(sexo, levels = c("Mujer", "Hombre"))
    sexo
    ```
    :::
:::

:::{#exr-matrices-1}
Realizar las siguientes operaciones con matrices.

a.  Crear una matriz de 2 filas y 2 columnas con los números del 1 al 4.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `matrix(vector, nrow, ncol)` permite crear una matriz con los datos de `vector` el número de filas indicado en `nrow` y el número de columnas indicado en `ncol`.

    ```{r}
    A <- matrix(1:4, nrow = 2, ncol = 2)
    A
    ```
    :::

a.  Añadir a la matriz anterior una nueva columna con los números del 5 y 6.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `cbind(matriz, vector)` permite añadir una nueva columna a la matriz `matriz` con los datos de `vector`.

    ```{r}
    A <- cbind(A, 5:6)
    A
    ```
    :::

a.  Crear una matriz de 2 filas y 2 columnas con los números del 1 al 4, rellenando los elementos por filas.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `matrix` rellena los elementos de la matriz por columnas. Para rellenar los elementos por filas, se puede utilizar el parámetro opcional `byrow = TRUE`.

    ```{r}
    B <- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE)
    B
    ```
    :::

a.  Crear otra matriz a partir de la anterior añadiendo una fila con los números 5 y 6.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    B <- rbind(B, 5:6)
    B
    ```
    :::

a.  Acceder al elemento de la segunda fila y la primera columna de la matriz anterior.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    B[2, 1]
    ```
    :::

a.  Seleccionar la primera fila de la matriz.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    B[1, ]
    ```
    :::

a.  Seleccionar la segunda columna de la matriz.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    B[, 2]
    ```
    :::

a.  Multiplicar la matriz A por la matriz B.

    :::{.callout-tip collapse="true"}
    ## Solución

    La multiplicación de matrices se realiza con el operador `%*%`.

    ```{r}
    A %*% B
    ```
    :::

a.  Calcular la transpuesta de la matriz A.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `t(matriz)` permite calcular la transpuesta de `matriz`.

    ```{r}
    t(A)
    ```
    :::
:::

:::{#exr-listas-1}
Realizar las siguientes operaciones con listas.



a.  Crear una lista con los siguientes con los datos del siguiente alumno:

    - Nombre: Juan.
    - Edad: 20 años.

    :::{.callout-tip collapse="true"}
    ## Solución

    Para crear una lista se utiliza la función `list(nombre1 = valor1, nombre2 = valor2, ...)`.

    ```{r}
    alumno <- list(Nombre = "Juan", Edad = 20)
    alumno
    ```
    :::

a.  Obtener la edad del alumno.

    :::{.callout-tip collapse="true"}
    ## Solución

    Para acceder a los elementos de una lista se utiliza el operador `$`.

    ```{r}
    alumno$Edad
    ```
    :::

a.  Crear una lista con las siguientes notas del alumno:

    - Matemáticas: 7.
    - Química: 8.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    notas <- list(Matemáticas = 7, Química = 8)
    notas
    ```
    :::

a.  Añadir la lista de notas a la lista del alumno.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    alumno$Notas <- notas
    alumno
    ```
    :::

a.  Añadir a la lista anterior la nota del examen de Física, que ha sido un 6.

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    alumno$Notas$Física <- 6
    alumno
    ```
    :::
:::

:::{#exr-dataframes-1}

La siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.

```{r, echo = F}
df1 <- data.frame(
    Mes = c("Enero", "Febrero", "Marzo", "Abril"),
    Ingresos = c(45000, 41500, 51200, 49700),
    Gastos = c(33400, 35400, 35600, 36300), 
    Impuestos = c(6450, 6300, 7100, 6850)
    )
df1[-4, ] |>
    kable() 
```

a.  Crear un data frame con los datos de la tabla.

    :::{.callout-tip collapse="true"}
    ## Solución

    Para crear un data frame se utiliza la función `data.frame(columna1 = vector1, columna2 = vector2, ...)`, donde `columna1`, `columna2`, ... son los nombres de las columnas y `vector1`, `vector2`, ... son los vectores con los datos de cada columna, que deben tener la misma longitud.

    ```{r}
    df <- data.frame(
        Mes = c("Enero", "Febrero", "Marzo"),
        Ingresos = c(45000, 41500, 51200),
        Gastos = c(33400, 35400, 35600)
        )
    df 
    ```
    :::

a.  Añadir una nueva columna con los siguientes impuestos pagados.

    ```{r, echo = F}
    df1[-4, ] |>
        select(Mes, Impuestos) |>
        kable()
    ```

    :::{.callout-tip collapse="true"}
    ## Solución

    :::{.panel-tabset}
    ## Base
    Con las funciones del paquete `base` de R.

    ```{r}
    df$Impuestos <- c(6450, 6300, 7100)
    df
    ```

    ## Tidyverse
    Con las funciones del paquete `dplyr` de `tidyverse`.

    ```{r}
    df <- df |> mutate(Impuestos = c(6450, 6300, 7100))
    df
    ```
    :::
    :::

a.  Añadir una nueva fila con los siguientes datos de Abril. 

    ```{r, echo = F}
    df1[4, ] |>
        kable(row.names = F)
    ```

    :::{.callout-tip collapse="true"}
    ## Solución
    
    :::{.panel-tabset}

    ## Base
    Con las funciones del paquete `base` de R.

    ```{r}
    df <- rbind(df, list(Mes = "Abril", Ingresos = 49700, Gastos = 36300, Impuestos = 6850))
    df
    ```
    
    ## Tidyverse
    Con las funciones del paquete `dplyr` de `tidyverse`.

    ```{r, echo = F}
    df <- df[-4, ]
    ```

    ```{r}
    df <- df |> add_row(Mes = "Abril", Ingresos = 49700, Gastos = 36300, Impuestos = 6850)
    df
    ```
    :::
    :::

a.  Cambiar los ingresos de Marzo por 50400. 

    :::{.callout-tip collapse="true"}
    ## Solución

    ```{r}
    df[3, "Ingresos"] <- 50400
    df
    ```
    :::

a.  Guardar el data frame en un fichero csv.

    :::{.callout-tip collapse="true"}
    ## Solución

    La función `write.csv(dataframe, "fichero.csv")` permite guardar el data frame `dataframe` en el fichero `fichero.csv`.

    ```{r}
    write.csv(df, "datos/ingresos_gastos.csv", row.names = FALSE)
    ```
    :::
:::

:::{#exr-dataframes-2}
El fichero [`colesterol.csv`](datos/colesterol.csv) contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.

a.  Crear un data frame con los datos de todos los pacientes del estudio a partir del fichero [`colesterol.csv`](datos/colesterol.csv) y mostrar las primeras filas.

    :::{.callout-tip collapse="true"}
    ## Solución
    :::{.panel-tabset}

    ## Base
    Con las funciones del paquete `base` de R. La función `read.csv("fichero.csv")` permite leer un fichero csv y cargar los datos en un data frame. Y la función `head(dataframe)` permite mostrar las primeras filas del data frame `dataframe`.

    ```{r}
    df <- read.csv("https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv")
    head(df)
    ```
    
    ## Tidyverse
    Con la función [`read_csv`](https://readr.tidyverse.org/reference/read_delim.html) del paquete del paquete [`readr`](https://readr.tidyverse.org/index.html) de `tidyverse`.

    ```{r}
    df <- read_csv("https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv")
    head(df)
    ```
    :::
    :::

a.  Mostrar las variables del data frame.

    :::{.callout-tip collapse="true"}
    ## Solución
    :::{.panel-tabset}

    ## Base
    Con las funciones del paquete `base` de R.

    ```{r}
    colnames(df)
    ```
    
    ## Tidyverse
    Con la función [`glimpse`](https://dplyr.tidyverse.org/reference/glimpse.html?q=read_csv#undefined) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`. Esta función muestra las columnas del data frame en filas, de manera que permite ver todas las columnas de un data frame cuando este tiene muchas columnas.

    ```{r}
    glimpse(df)
    ```
    :::
    :::

a.  Mostrar el número de filas del data frame, que corresponde al número de pacientes.

    :::{.callout-tip collapse="true"}
    ## Solución
    
    La función `nrow(dataframe)` permite mostrar el número de filas del data frame `dataframe`.

    ```{r}
    nrow(df)
    ```
    :::

a.  Mostrar 5 filas aleatorias del data frame.

    :::{.callout-tip collapse="true"}
    ## Solución
    :::{.panel-tabset}

    ## Base

    La función `sample(vector, n)` permite seleccionar `n` elementos aleatorios de `vector`. El muestreo es sin reemplazamiento.

    ```{r}
    df[sample(nrow(df), 5), ]
    ```

    ## Tidyverse

    La función `sample_n(dataframe, n)` del paquete `dplyr` de `tidyverse` permite seleccionar `n` filas aleatorias del data frame `dataframe`.

    ```{r}
    df |> sample_n(5)
    ```
    :::
    :::

a.  Obtener los datos de colesterol de los pacientes.

    :::{.callout-tip collapse="true"}
    ## Solución
    :::{.panel-tabset}

    ## Base
    Con las funciones del paquete `base` de R.

    ```{r}
    df$colesterol
    ```

    ## Tidyverse
    Con la función [`select`](https://dplyr.tidyverse.org/reference/select.html) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`.

    ```{r}
    df |> select(colesterol)
    ```
    :::
    :::

a.  Obtener los datos del quinto paciente.

    :::{.callout-tip collapse="true"}
    ## Solución
    :::{.panel-tabset}

    ## Base
    Con las funciones del paquete `base` de R.

    ```{r}
    df[5, ]
    ```

    ## Tidyverse
    Con la función [`slice`](https://dplyr.tidyverse.org/reference/slice.html) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`.

    ```{r}
    df |> slice(5)
    ```
    :::
    :::
:::

## Ejercicios Propuestos

:::{#exr-vectores-2}
La siguiente tabla contiene las notas de un grupo de alumnos en dos asignaturas.

```{r, echo = F}
df2 <- read.csv("datos/notas.csv")

df2 |>
    kable() 
```

a.  Crear un vector con los nombres de los alumnos.

a.  Crear un factor el grupo.

a.  Crear un vector con las notas de Física y otro con las notas de Química.

a.  Crear un vector con la nota media de las dos asignaturas.

a.  Crear un vector booleano con los alumnos que han aprobado el curso. Para aprobar el curso, la nota media de las dos asignaturas debe ser mayor o igual a 5.

a.  Crear un vector con los nombres de los alumnos que han aprobado el curso.

a.  Crear un data frame con los nombres de los alumnos, sus notas y su media reutilizando los vectores anteriores.

a.  Guardar el data frame en un fichero csv.
:::
