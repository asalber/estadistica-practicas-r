---
title: Estadística Descriptiva
keep-md: true
lang: es
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

## Ejercicios Resueltos

Para la realización de esta práctica se requieren los siguientes paquetes:

```r
library(tidyverse) 
# Incluye los siguientes paquetes:
# - readr: para la lectura de ficheros csv. 
# - dplyr: para el preprocesamiento y manipulación de datos.
library(vtable) # para resúmenes estadísticos.
library(skimr) # para resúmenes estadísticos.
library(summarytools) # para resúmenes estadísticos.
library(knitr) # para el formateo de tablas.
library(kableExtra) # para personalizar el formato de las tablas.
```

:::{#exr-descriptiva-1}
En una encuesta a 25 matrimonios sobre el número de hijos que tenían se obtuvieron los siguientes datos:

| |
|:-:|
|1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2 |


a.  Crear un conjunto de datos con la variable `hijos`.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    df <- data.frame(hijos = c(1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2))
    ```
    :::

a.  Calcular el tamaño muestral. 

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    nrow(df)
    ```
    :::

a.  Calcular la media.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    mean(df$hijos)
    ```
    :::

a.  Calcular la mediana.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    median(df$hijos)
    ```
    :::

a.  Calcular la moda.

    :::{.callout-tip collapse="true"}
    ## Solución
    El paquete base de R no tiene implementada ninguna función para calcular la moda, así que definiremos nuestra propia función.
    ```{r}
    moda <- function(x) {
    u <- unique(x) # Vector con los valores de la muestra sin repetir (sin ordenar).
    tab <- tabulate(match(x, u)) # Frecuencias absolutas de los valores en u.
    u[tab == max(tab)] # Valor con la mayor frecuencia.
    }

    moda(df$hijos)
    ```
    :::

a.  Calcular el mínimo.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    min(df$hijos)
    ```
    :::

a.  Calcular el máximo.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    max(df$hijos)
    ```
    :::

a.  Calcular los cuartiles.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    quantile(df$hijos, prob=c(0.25, 0.5, 0.75))
    ```
    :::

a.  Calcular los percentiles 5 y 95.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    quantile(df$hijos, prob=c(0.05, 0.95))
    ```
    :::

a.  Calcular el rango. 

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    max(df$hijos) - min(df$hijos)
    ```
    :::

a.  Calcular el rango intecuartílico. 

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    IQR(df$hijos)
    ```
    :::

a.  Calcular la varianza 

    :::{.callout-tip collapse="true"}
    ## Solución
    R dispone de la función `var` para calcular la _cuasivarianza_ o _varianza corregida_ $\sum \frac{(x_i-\bar x)^2}{n-1}$, pero no dispone de una función para calcular la varianza, de manera que para calcularla hay que corregir la cuasivarianza.
    ```{r}
    n <- nrow(df)
    # Cuasivarianza
    print(paste("Cuasivarianza:", var(df$hijos)))
    # Varianza
    print(paste("Varianza: ", var(df$hijos)*(n-1)/n))
    ```
    :::

a.  Calcular la desviación típica.

    :::{.callout-tip collapse="true"}
    ## Solución
    R dispone de la función `sd` para calcular la _cuasidesviación típica_ o _desviación típica corregida_ $\sqrt{\sum \frac{(x_i-\bar x)^2}{n-1}}$, pero no dispone de una función para calcular la desviación típica, de manera que para calcularla hay que corregir la cuasidesviación típica.
    ```{r}
    n <- nrow(df)
    # Cuasidesviación típica
    print(paste("Cuasidesviación típica:", sd(df$hijos)))
    # Desviación típica
    print(paste("Desviación típica: ", sd(df$hijos)*sqrt((n-1)/n)))
    ```
    :::

a.  Calcular el coeficiente de variación.

    :::{.callout-tip collapse="true"}
    ## Solución
    ```{r}
    sd(df$hijos) / abs(mean(df$hijos))
    ```
    :::

a.  Calcular el coeficiente de asimetría.

    :::{.callout-tip collapse="true"}
    ## Solución
    Para calcular el coeficiente de asimetría se utiliza el paquete _moments_.

    ```{r}
    library(moments)
    skewness(df$hijos)
    ```

    Como $g_1$ está próxima a $0$, la distribución es casi simétrica.
    :::

a.  Calcular el coeficiente de apuntamiento.

    :::{.callout-tip collapse="true"}
    ## Solución
    Para calcular el coeficiente de apuntamiento se utiliza el paquete _moments_.

    ```{r}
    library(moments)
    kurtosis(df$hijos)
    ```

    Como $g_2>0$, la distribución es más apuntada de lo normal (leptocúrtica). Como además $g_2\not\in(-2,2)$ se puede concluir que la muestra es demasiado apuntada para provenir de una población normal.
    :::
:::

:::{#exr-descriptiva-2}
El fichero [`colesterol.csv`](datos/colesterol.csv) contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.

a.  Crear un data frame con los datos de todos los pacientes del estudio a partir del fichero [`colesterol.csv`](datos/colesterol.csv).

    :::{.callout-tip collapse="true"}
    ## Solución 
    ```{r}
    df <- read.csv("https://raw.githubusercontent.com/asalber/estadistica-practicas-r/main/datos/colesterol.csv")
    df
    ```
    :::

a.  Calcular el tamaño muestral según el sexo.

    :::{.callout-tip collapse="true"}
    ## Solución 1
    ```{r}
    table(df$sexo)
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    ```{r}
    library(dplyr)
    count(df, sexo)
    ```
    :::

a.  Calcular la media y la desviación típica del nivel de colesterol sin tener en cuenta los datos perdidos.

    :::{.callout-tip collapse="true"}
    ## Solución 
    ```{r}
    print(paste("Media:", mean(df$colesterol, na.rm = TRUE)))
    print(paste("Desviación típica:", sd(df$colesterol, na.rm = TRUE)))
    ```
    :::

a.  Realizar un resumen estadístico con la media, el mínimo, los cuartiles y el máximo.

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Usando el paquete base de R.

    ```{r}
    summary(df)
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Usando la función `st` del paquete [`vtable`](https://cran.r-project.org/web/packages/vtable/vignettes/sumtable.html).
    
    ```{r}
    library(vtable)
    st(df)
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 3
    Usando la función `skim` del paquete [`skimr`](https://cran.r-project.org/web/packages/skimr/vignettes/skimr.html).
    
    ```{r}
    library(skimr)
    skim(df)
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 4
    Usando las funciones `descr` y `dfSummary` del paquete [`summarytools`](https://cran.r-project.org/web/packages/summarytools/vignettes/introduction.html).
    
    ```{r}
    library(summarytools)
    descr(df) |>
    kable() |>
    kable_styling()

    print(dfSummary(df, plain.ascii = FALSE, style = "grid"), method = "render")
    ```
    :::

a.  ¿En qué variable es más representativa la media?

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Usando la función `sumtable` del paquete [`vtable`](https://cran.r-project.org/web/packages/vtable/vignettes/sumtable.html).
    ```{r}
    library(vtable)
    sumtable(df, summ = c('mean(x)', 'sd(x)', 'sd(x)/mean(x)'),
    summ.names = c("Media", "Desviación Típica", "Coef. Variación"))
    ```

    La variable con el coeficiente de variación más pequeño es la altura, por lo que es la que tiene la media más representativa.
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Usando las funciones `summarise` y `across` del paquete `dplyr`.
    ```{r}
    library(dplyr)
    summarise(df, across(.cols = where(is.numeric), .fns = list(Media = ~ mean(.x, na.rm = T), `Desviación Típica` = ~ sd(.x, na.rm = T), `Coef. Variación` = ~ sd(.x, na.rm=T) / mean(.x, na.rm=T)))) |>
    kable() |>
    kable_styling()
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 3
    Usando las funciones `group_by` y `summarise` del paquete `dplyr` y pivotando el data frame a formato largo.
    ```{r}
    library(tidyverse)
    df |> select(where(is.numeric)) |> 
        pivot_longer(everything(), names_to = "Variable", values_to = "Valor") |>
        group_by(Variable) |>
        summarise("Media" = mean(Valor, na.rm = T), 
        "Desviación Típica" = sd(Valor, na.rm = T),
        "Coef. Variación" = sd(Valor, na.rm = T) / mean(Valor, na.rm = T)) |>
        kable() |>
        kable_styling()
    ```

    La variable con el coeficiente de variación más pequeño es la altura, por lo que es la que tiene la media más representativa.
    :::

    
a.  Realizar un resumen estadístico con el coeficiente de asimetría y el coeficiente de apuntamiento del peso y la estatura según el sexo. ¿Qué grupo tiene peso más normal, los hombres o las mujeres? ¿Y una estatura más normal?

    :::{.callout-tip collapse="true"}
    ## Solución 1
    Usando la función `sumtable` del paquete [`vtable`](https://cran.r-project.org/web/packages/vtable/vignettes/sumtable.html).
    ```{r}
    library(vtable)
    sumtable(df, vars = c("peso", "altura"), group = "sexo", summ = c('skewness(x)', 'kurtosis(x)'),
    summ.names = c("Coef. Asimetría", "Coef. Apuntamiento"))
    ```
    :::

    :::{.callout-tip collapse="true"}
    ## Solución 2
    Usando las funciones `group_by` y `summarise` del paquete [`dplyr`]().
    
    ```{r}
    library(dplyr)
    df |> select(sexo, peso, altura) |>
    group_by(sexo) |>
    summarise(across(.cols = everything(), .fns = list("Coef. Asimetría" = ~ skewness(.x, na.rm = T), "Coef. Apuntamiento" = ~ kurtosis(.x, na.rm = T)))) |>
    kable() |>
    kable_styling()
    ```

    Las mujeres tienen un peso más normal ya que tanto el coeficiente de asimetría como el de apuntamiento están más próximos a 0. Lo mismo ocurre con la altura.
    :::
:::

## Ejercicios propuestos

:::{#exr-descriptiva-3}
El fichero [`renta-media-comunidades-autonomas.csv`](datos/renta-media-comunidades-autonomas.csv) contiene información sobre la renta neta media por persona de las comunidades autónomas desde 2008 a 2021. 

a.  Crear un data frame con los datos de las rentas medias por persona de las comunidades a partir del fichero [`renta-media-comunidades-autonomas.csv`](datos/renta-media-comunidades-autonomas.csv).

    :::{.callout-tip collapse="true"}
    ## Solución 

    ```{r, echo = F}
    df <- read_csv2("datos/renta-media-comunidades-autonomas-2.csv")
    df <- read_csv2("datos/renta-media-comunidades-autonomas-3.csv")
    df <- read_csv2("datos/renta-media-comunidades-autonomas-4.csv")
    ```

    ```{r}
    df <- read_csv2("https://aprendeconalf.es/estadistica-practicas-r/datos/renta-media-comunidades-autonomas.csv")
    df
    ```
    :::

a.  Realizar un resumen estadístico con la media y la desviación típica, mínimo, cuartiles y máximo de todas las rentas medias.

a.  Realizar un resumen estadístico con la media y la desviación típica de las rentas medias de cada año.

a.  ¿Qué año presenta una menor variabilidad relativa?

a.  ¿En qué comunidad autónoma hay menos dispersión relativa con respecto a la media?

a.  ¿En qué comunidad autónoma es más representativa la media de las rentas?

a.  ¿Qué comunidad autónoma presenta una distribución de las rentas más normal a lo largo de los años?

a.  ¿Qué comunidades autónomas tienen una renta media por debajo del percentil 10? ¿Y cuáles tienen una renta media por encima del percentil 90?

a.  Crear la variable `riqueza` que clasifique las comunidades según la media de sus rentas en `baja` (por debajo del primer cuartil), `media` (entre el primer y el tercer cuartil) y `alta` (por encima del tercer cuartil).

a.  Hacer un resumen estadístico con la media, cuartiles, desviación típica, coeficiente de variación, coeficiente de asimetría y coeficiente de curtosis de las rentas medias según la riqueza.
:::
<!-- 

```{r}
df <- df |> 
    mutate(total = rowMeans(across(where(is.numeric)), na.rm = T))
df |> mutate(riqueza = cut(total, breaks = quantile(total, probs = c(0, 0.25, 0.75, 1)), include.lowest = T)) |> select(riqueza)
``` -->