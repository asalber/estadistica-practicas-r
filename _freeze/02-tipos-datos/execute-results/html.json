{
  "hash": "365dc0fc10921562c32ee25e9749e7e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Tipos y estructuras de datos\nlang: es\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\nEsta práctica contiene ejercicios que muestran cómo trabajar con los tipos y estructuras de datos en R. En concreto, las estructuras de datos que se utilizan son\n\n    - Vectores.\n    - Factores.\n    - Matrices.\n    - Listas.\n    - Dataframes.\n\n## Ejercicios Resueltos\n\nPara la realización de esta práctica se requieren los siguientes paquetes.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\n```\n:::\n\n\n\n\n\n\n\n\n:::{#exr-vectores-1}\nRealizar las siguientes operaciones con vectores.\n\na.  Crear un vector con los números del 1 al 10.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    :::{.panel-tabset}\n    ## Función c\n\n    La función `c()` permite combinar elementos en un vector. Los elementos se introducen separados por comas.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    numeros <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    numeros\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     [1]  1  2  3  4  5  6  7  8  9 10\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    ## Operador :\n\n    El operador `inicio:fin` permite crear un vector con la secuencia de números enteros desde el número `inicio` hasta el número `fin`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    numeros <- 1:10\n    numeros\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     [1]  1  2  3  4  5  6  7  8  9 10\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n\na.  Mostrar el número de elementos del vector anterior.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    length(numeros)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 10\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Crear un vector con los números pares del 1 al 10.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    :::{.panel-tabset}\n    ## Función c\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    pares <- c(2, 4, 6, 8, 10)\n    pares\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1]  2  4  6  8 10\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    ## Función seq\n\n    La función `seq(inicio, fin, salto)` permite crear un vector con la secuencia de números enteros desde el número `inicio` hasta el número `fin` con un salto de `salto`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    pares <- seq(2, 10, by = 2)\n    pares\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1]  2  4  6  8 10\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n\na.  Crear un vector con el cuadrado de los elementos del vector anterior.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    El operador `^` permite elevar un número a otro. Cuando se aplica a un vector, eleva cada elemento del vector al número indicado.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    cuadrados <- pares^2\n    cuadrados\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1]   4  16  36  64 100\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Crear un vector con 5 números aleatorios entre 1 y 10.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `sample(vector, n)` permite seleccionar `n` elementos aleatorios de `vector`. El muestreo es sin reemplazamiento.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    aleatorios <- sample(1:10, 5)\n    aleatorios\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1]  3 10  2  8  6\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Crear un vector booleano con los números del vector anterior que son pares.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    El operador `%%` permite calcular el resto de la división entera de dos números. Si el resto es 0, el número es par. Y el operador `==` permite comparar dos vectores elemento a elemento.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    par <- aleatorios %% 2 == 0\n    par\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] FALSE  TRUE  TRUE  TRUE  TRUE\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Crear un vector con 100 números aleatorios entre 0 y 1.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `runif(n, min, max)` permite generar `n` números aleatorios entre `min` y `max`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    aleatorios2 <- runif(100, 0, 1)\n    aleatorios2\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      [1] 0.5514350145 0.4566147353 0.9568333453 0.4533341562 0.6775706355\n      [6] 0.5726334020 0.1029246827 0.8998249704 0.2460877344 0.0420595335\n     [11] 0.3279207193 0.9545036491 0.8895393161 0.6928034062 0.6405068138\n     [16] 0.9942697766 0.6557057991 0.7085304682 0.5440660247 0.5941420204\n     [21] 0.2891597373 0.1471136473 0.9630242325 0.9022990451 0.6907052784\n     [26] 0.7954674177 0.0246136845 0.4777959711 0.7584595375 0.2164079358\n     [31] 0.3181810076 0.2316257854 0.1428000224 0.4145463358 0.4137243263\n     [36] 0.3688454509 0.1524447477 0.1388060634 0.2330340995 0.4659624503\n     [41] 0.2659726404 0.8578277153 0.0458311667 0.4422000742 0.7989248456\n     [46] 0.1218992600 0.5609479838 0.2065313896 0.1275316502 0.7533078643\n     [51] 0.8950453592 0.3744627759 0.6651151946 0.0948406609 0.3839696378\n     [56] 0.2743836446 0.8146400389 0.4485163414 0.8100643530 0.8123895095\n     [61] 0.7943423211 0.4398316876 0.7544751586 0.6292211316 0.7101824014\n     [66] 0.0006247733 0.4753165741 0.2201188852 0.3798165377 0.6127710033\n     [71] 0.3517979092 0.1111354243 0.2436194727 0.6680555874 0.4176467797\n     [76] 0.7881958340 0.1028646443 0.4348927415 0.9849569800 0.8930511144\n     [81] 0.8864690608 0.1750526503 0.1306956916 0.6531019250 0.3435164723\n     [86] 0.6567581280 0.3203732425 0.1876911193 0.7822943013 0.0935949867\n     [91] 0.4667790416 0.5115054599 0.5999889593 0.3328235403 0.4886130337\n     [96] 0.9544738275 0.4829023972 0.8903502221 0.9144381869 0.6087349823\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Ordenar el vector anterior de menor a mayor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `sort(vector)` permite ordenar los elementos de un vector de menor a mayor.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sort(aleatorios2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      [1] 0.0006247733 0.0246136845 0.0420595335 0.0458311667 0.0935949867\n      [6] 0.0948406609 0.1028646443 0.1029246827 0.1111354243 0.1218992600\n     [11] 0.1275316502 0.1306956916 0.1388060634 0.1428000224 0.1471136473\n     [16] 0.1524447477 0.1750526503 0.1876911193 0.2065313896 0.2164079358\n     [21] 0.2201188852 0.2316257854 0.2330340995 0.2436194727 0.2460877344\n     [26] 0.2659726404 0.2743836446 0.2891597373 0.3181810076 0.3203732425\n     [31] 0.3279207193 0.3328235403 0.3435164723 0.3517979092 0.3688454509\n     [36] 0.3744627759 0.3798165377 0.3839696378 0.4137243263 0.4145463358\n     [41] 0.4176467797 0.4348927415 0.4398316876 0.4422000742 0.4485163414\n     [46] 0.4533341562 0.4566147353 0.4659624503 0.4667790416 0.4753165741\n     [51] 0.4777959711 0.4829023972 0.4886130337 0.5115054599 0.5440660247\n     [56] 0.5514350145 0.5609479838 0.5726334020 0.5941420204 0.5999889593\n     [61] 0.6087349823 0.6127710033 0.6292211316 0.6405068138 0.6531019250\n     [66] 0.6557057991 0.6567581280 0.6651151946 0.6680555874 0.6775706355\n     [71] 0.6907052784 0.6928034062 0.7085304682 0.7101824014 0.7533078643\n     [76] 0.7544751586 0.7584595375 0.7822943013 0.7881958340 0.7943423211\n     [81] 0.7954674177 0.7989248456 0.8100643530 0.8123895095 0.8146400389\n     [86] 0.8578277153 0.8864690608 0.8895393161 0.8903502221 0.8930511144\n     [91] 0.8950453592 0.8998249704 0.9022990451 0.9144381869 0.9544738275\n     [96] 0.9545036491 0.9568333453 0.9630242325 0.9849569800 0.9942697766\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Ordenar el vector anterior de mayor a menor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `sort(vector, decreasing = TRUE)` permite ordenar los elementos de un vector de mayor a menor.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sort(aleatorios2, decreasing = TRUE)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      [1] 0.9942697766 0.9849569800 0.9630242325 0.9568333453 0.9545036491\n      [6] 0.9544738275 0.9144381869 0.9022990451 0.8998249704 0.8950453592\n     [11] 0.8930511144 0.8903502221 0.8895393161 0.8864690608 0.8578277153\n     [16] 0.8146400389 0.8123895095 0.8100643530 0.7989248456 0.7954674177\n     [21] 0.7943423211 0.7881958340 0.7822943013 0.7584595375 0.7544751586\n     [26] 0.7533078643 0.7101824014 0.7085304682 0.6928034062 0.6907052784\n     [31] 0.6775706355 0.6680555874 0.6651151946 0.6567581280 0.6557057991\n     [36] 0.6531019250 0.6405068138 0.6292211316 0.6127710033 0.6087349823\n     [41] 0.5999889593 0.5941420204 0.5726334020 0.5609479838 0.5514350145\n     [46] 0.5440660247 0.5115054599 0.4886130337 0.4829023972 0.4777959711\n     [51] 0.4753165741 0.4667790416 0.4659624503 0.4566147353 0.4533341562\n     [56] 0.4485163414 0.4422000742 0.4398316876 0.4348927415 0.4176467797\n     [61] 0.4145463358 0.4137243263 0.3839696378 0.3798165377 0.3744627759\n     [66] 0.3688454509 0.3517979092 0.3435164723 0.3328235403 0.3279207193\n     [71] 0.3203732425 0.3181810076 0.2891597373 0.2743836446 0.2659726404\n     [76] 0.2460877344 0.2436194727 0.2330340995 0.2316257854 0.2201188852\n     [81] 0.2164079358 0.2065313896 0.1876911193 0.1750526503 0.1524447477\n     [86] 0.1471136473 0.1428000224 0.1388060634 0.1306956916 0.1275316502\n     [91] 0.1218992600 0.1111354243 0.1029246827 0.1028646443 0.0948406609\n     [96] 0.0935949867 0.0458311667 0.0420595335 0.0246136845 0.0006247733\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Crear un vector con los días laborables de la semana.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dias_laborables <- c(\"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\")\n    dias_laborables\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"  \n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Añadir los días del fin de semana al vector anterior y guardar el resultado en una nueva variable.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dias <- c(dias_laborables, \"Sábado\", \"Domingo\")\n    dias\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"   \"Sábado\"   \n    [7] \"Domingo\"  \n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Acceder al tercer elemento del vector.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dias_laborables[3]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Miércoles\"\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Seleccionar los días pares del vector.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    :::{.panel-tabset}\n    ## Índices numéricos\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dias[c(2, 4, 6)]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Martes\" \"Jueves\" \"Sábado\"\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    ## Índices numéricos negativos\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dias[-c(1, 3, 5, 7)]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Martes\" \"Jueves\" \"Sábado\"\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    ## Índices lógicos\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    dias[c(FALSE, TRUE)]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Martes\" \"Jueves\" \"Sábado\"\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n:::\n\n:::{#exr-factores-1}\nSe ha tomado una muestra de alumnos de una clase y se ha recogido la información sobre el sexo de los alumnos obteniendo los siguientes datos:\n\n$$\n\\mbox{Mujer, Hombre, Mujer, Hombre, Mujer, Mujer, Hombre, Hombre}\n$$\n\na.  Crear un vector con los datos de la muestra.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sexo <- c(\"Mujer\", \"Hombre\", \"Mujer\", \"Hombre\", \"Mujer\", \"Mujer\", \"Hombre\", \"Hombre\")\n    sexo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Mujer\"  \"Hombre\" \"Mujer\"  \"Hombre\" \"Mujer\"  \"Mujer\"  \"Hombre\" \"Hombre\"\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Convertir el vector anterior en un factor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `factor(vector, labels)` permite convertir `vector` en un factor con los niveles o categorías especificados en `labels`. Si no se indica `labels`, los niveles se toman de los elementos del vector y se ordenan alfabéticamente.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sexo <- factor(sexo)\n    sexo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] Mujer  Hombre Mujer  Hombre Mujer  Mujer  Hombre Hombre\n    Levels: Hombre Mujer\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Mostrar los niveles del factor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `levels(factor)` permite mostrar los niveles del factor `factor`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    levels(sexo)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Hombre\" \"Mujer\" \n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Reordenar los niveles del factor para que la categoría \"Mujer\" sea la primera.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sexo <- factor(sexo, levels = c(\"Mujer\", \"Hombre\"))\n    sexo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] Mujer  Hombre Mujer  Hombre Mujer  Mujer  Hombre Hombre\n    Levels: Mujer Hombre\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n:::\n\n:::{#exr-matrices-1}\nRealizar las siguientes operaciones con matrices.\n\na.  Crear una matriz de 2 filas y 2 columnas con los números del 1 al 4.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `matrix(vector, nrow, ncol)` permite crear una matriz con los datos de `vector` el número de filas indicado en `nrow` y el número de columnas indicado en `ncol`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    A <- matrix(1:4, nrow = 2, ncol = 2)\n    A\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    1    3\n    [2,]    2    4\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Añadir a la matriz anterior una nueva columna con los números del 5 y 6.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `cbind(matriz, vector)` permite añadir una nueva columna a la matriz `matriz` con los datos de `vector`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    A <- cbind(A, 5:6)\n    A\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2] [,3]\n    [1,]    1    3    5\n    [2,]    2    4    6\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Crear una matriz de 2 filas y 2 columnas con los números del 1 al 4, rellenando los elementos por filas.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `matrix` rellena los elementos de la matriz por columnas. Para rellenar los elementos por filas, se puede utilizar el parámetro opcional `byrow = TRUE`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    B <- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE)\n    B\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    1    2\n    [2,]    3    4\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Crear otra matriz a partir de la anterior añadiendo una fila con los números 5 y 6.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    B <- rbind(B, 5:6)\n    B\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    1    2\n    [2,]    3    4\n    [3,]    5    6\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Acceder al elemento de la segunda fila y la primera columna de la matriz anterior.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    B[2, 1]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 3\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Seleccionar la primera fila de la matriz.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    B[1, ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 1 2\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Seleccionar la segunda columna de la matriz.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    B[, 2]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 2 4 6\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Multiplicar la matriz A por la matriz B.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La multiplicación de matrices se realiza con el operador `%*%`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    A %*% B\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]   35   44\n    [2,]   44   56\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Calcular la transpuesta de la matriz A.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `t(matriz)` permite calcular la transpuesta de `matriz`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    t(A)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    1    2\n    [2,]    3    4\n    [3,]    5    6\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n:::\n\n:::{#exr-listas-1}\nRealizar las siguientes operaciones con listas.\n\n\n\na.  Crear una lista con los siguientes con los datos del siguiente alumno:\n\n    - Nombre: Juan.\n    - Edad: 20 años.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    Para crear una lista se utiliza la función `list(nombre1 = valor1, nombre2 = valor2, ...)`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    alumno <- list(Nombre = \"Juan\", Edad = 20)\n    alumno\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $Nombre\n    [1] \"Juan\"\n    \n    $Edad\n    [1] 20\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Obtener la edad del alumno.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    Para acceder a los elementos de una lista se utiliza el operador `$`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    alumno$Edad\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 20\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Crear una lista con las siguientes notas del alumno:\n\n    - Matemáticas: 7.\n    - Química: 8.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    notas <- list(Matemáticas = 7, Química = 8)\n    notas\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $Matemáticas\n    [1] 7\n    \n    $Química\n    [1] 8\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Añadir la lista de notas a la lista del alumno.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    alumno$Notas <- notas\n    alumno\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $Nombre\n    [1] \"Juan\"\n    \n    $Edad\n    [1] 20\n    \n    $Notas\n    $Notas$Matemáticas\n    [1] 7\n    \n    $Notas$Química\n    [1] 8\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Añadir a la lista anterior la nota del examen de Física, que ha sido un 6.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    alumno$Notas$Física <- 6\n    alumno\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $Nombre\n    [1] \"Juan\"\n    \n    $Edad\n    [1] 20\n    \n    $Notas\n    $Notas$Matemáticas\n    [1] 7\n    \n    $Notas$Química\n    [1] 8\n    \n    $Notas$Física\n    [1] 6\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n:::\n\n:::{#exr-dataframes-1}\n\nLa siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Mes     | Ingresos| Gastos| Impuestos|\n|:-------|--------:|------:|---------:|\n|Enero   |    45000|  33400|      6450|\n|Febrero |    41500|  35400|      6300|\n|Marzo   |    51200|  35600|      7100|\n\n\n:::\n:::\n\n\n\n\n\n\n\n\na.  Crear un data frame con los datos de la tabla.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    Para crear un data frame se utiliza la función `data.frame(columna1 = vector1, columna2 = vector2, ...)`, donde `columna1`, `columna2`, ... son los nombres de las columnas y `vector1`, `vector2`, ... son los vectores con los datos de cada columna, que deben tener la misma longitud.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- data.frame(\n        Mes = c(\"Enero\", \"Febrero\", \"Marzo\"),\n        Ingresos = c(45000, 41500, 51200),\n        Gastos = c(33400, 35400, 35600)\n        )\n    df \n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          Mes Ingresos Gastos\n    1   Enero    45000  33400\n    2 Febrero    41500  35400\n    3   Marzo    51200  35600\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Añadir una nueva columna con los siguientes impuestos pagados.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    `````{=html}\n    <table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n     <thead>\n      <tr>\n       <th style=\"text-align:left;\"> Mes </th>\n       <th style=\"text-align:right;\"> Impuestos </th>\n      </tr>\n     </thead>\n    <tbody>\n      <tr>\n       <td style=\"text-align:left;\"> Enero </td>\n       <td style=\"text-align:right;\"> 6450 </td>\n      </tr>\n      <tr>\n       <td style=\"text-align:left;\"> Febrero </td>\n       <td style=\"text-align:right;\"> 6300 </td>\n      </tr>\n      <tr>\n       <td style=\"text-align:left;\"> Marzo </td>\n       <td style=\"text-align:right;\"> 7100 </td>\n      </tr>\n    </tbody>\n    </table>\n    \n    `````\n    :::\n    :::\n\n\n\n\n\n\n\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    :::{.panel-tabset}\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df$Impuestos <- c(6450, 6300, 7100)\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          Mes Ingresos Gastos Impuestos\n    1   Enero    45000  33400      6450\n    2 Febrero    41500  35400      6300\n    3   Marzo    51200  35600      7100\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    ## Tidyverse\n    Con las funciones del paquete `dplyr` de `tidyverse`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |> mutate(Impuestos = c(6450, 6300, 7100))\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          Mes Ingresos Gastos Impuestos\n    1   Enero    45000  33400      6450\n    2 Febrero    41500  35400      6300\n    3   Marzo    51200  35600      7100\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n\na.  Añadir una nueva fila con los siguientes datos de Abril. \n\n\n\n\n\n\n\n\n    ::: {.cell}\n    ::: {.cell-output-display}\n    \n    \n    |Mes   | Ingresos| Gastos| Impuestos|\n    |:-----|--------:|------:|---------:|\n    |Abril |    49700|  36300|      6850|\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    \n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- rbind(df, list(Mes = \"Abril\", Ingresos = 49700, Gastos = 36300, Impuestos = 6850))\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          Mes Ingresos Gastos Impuestos\n    1   Enero    45000  33400      6450\n    2 Febrero    41500  35400      6300\n    3   Marzo    51200  35600      7100\n    4   Abril    49700  36300      6850\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    \n    ## Tidyverse\n    Con las funciones del paquete `dplyr` de `tidyverse`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- df |> add_row(Mes = \"Abril\", Ingresos = 49700, Gastos = 36300, Impuestos = 6850)\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          Mes Ingresos Gastos Impuestos\n    1   Enero    45000  33400      6450\n    2 Febrero    41500  35400      6300\n    3   Marzo    51200  35600      7100\n    4   Abril    49700  36300      6850\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n\na.  Cambiar los ingresos de Marzo por 50400. \n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[3, \"Ingresos\"] <- 50400\n    df\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n          Mes Ingresos Gastos Impuestos\n    1   Enero    45000  33400      6450\n    2 Febrero    41500  35400      6300\n    3   Marzo    50400  35600      7100\n    4   Abril    49700  36300      6850\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Guardar el data frame en un fichero csv.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `write.csv(dataframe, \"fichero.csv\")` permite guardar el data frame `dataframe` en el fichero `fichero.csv`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    write.csv(df, \"datos/ingresos_gastos.csv\", row.names = FALSE)\n    ```\n    :::\n\n\n\n\n\n\n\n    :::\n:::\n\n:::{#exr-dataframes-2}\nEl fichero [`colesterol.csv`](datos/colesterol.csv) contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\na.  Crear un data frame con los datos de todos los pacientes del estudio a partir del fichero [`colesterol.csv`](datos/colesterol.csv) y mostrar las primeras filas.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R. La función `read.csv(\"fichero.csv\")` permite leer un fichero csv y cargar los datos en un data frame. Y la función `head(dataframe)` permite mostrar las primeras filas del data frame `dataframe`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- read.csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n                            nombre edad sexo peso altura colesterol\n    1 José Luis Martínez Izquierdo   18    H   85   1.79        182\n    2               Rosa Díaz Díaz   32    M   65   1.73        232\n    3        Javier García Sánchez   24    H   NA   1.81        191\n    4          Carmen López Pinzón   35    M   65   1.70        200\n    5         Marisa López Collado   46    M   51   1.58        148\n    6            Antonio Ruiz Cruz   68    H   66   1.74        249\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    \n    ## Tidyverse\n    Con la función [`read_csv`](https://readr.tidyverse.org/reference/read_delim.html) del paquete del paquete [`readr`](https://readr.tidyverse.org/index.html) de `tidyverse`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    Rows: 14 Columns: 6\n    ── Column specification ────────────────────────────────────────────────────────\n    Delimiter: \",\"\n    chr (2): nombre, sexo\n    dbl (4): edad, peso, altura, colesterol\n    \n    ℹ Use `spec()` to retrieve the full column specification for this data.\n    ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 6\n      nombre                        edad sexo   peso altura colesterol\n      <chr>                        <dbl> <chr> <dbl>  <dbl>      <dbl>\n    1 José Luis Martínez Izquierdo    18 H        85   1.79        182\n    2 Rosa Díaz Díaz                  32 M        65   1.73        232\n    3 Javier García Sánchez           24 H        NA   1.81        191\n    4 Carmen López Pinzón             35 M        65   1.7         200\n    5 Marisa López Collado            46 M        51   1.58        148\n    6 Antonio Ruiz Cruz               68 H        66   1.74        249\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n\na.  Mostrar las variables del data frame.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    colnames(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"nombre\"     \"edad\"       \"sexo\"       \"peso\"       \"altura\"    \n    [6] \"colesterol\"\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    \n    ## Tidyverse\n    Con la función [`glimpse`](https://dplyr.tidyverse.org/reference/glimpse.html?q=read_csv#undefined) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`. Esta función muestra las columnas del data frame en filas, de manera que permite ver todas las columnas de un data frame cuando este tiene muchas columnas.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    glimpse(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Rows: 14\n    Columns: 6\n    $ nombre     <chr> \"José Luis Martínez Izquierdo\", \"Rosa Díaz Díaz\", \"Javier G…\n    $ edad       <dbl> 18, 32, 24, 35, 46, 68, 51, 22, 35, 46, 53, 58, 27, 20\n    $ sexo       <chr> \"H\", \"M\", \"H\", \"M\", \"M\", \"H\", \"H\", \"M\", \"H\", \"H\", \"M\", \"H\",…\n    $ peso       <dbl> 85, 65, NA, 65, 51, 66, 62, 60, 90, 75, 55, 78, 109, 61\n    $ altura     <dbl> 1.79, 1.73, 1.81, 1.70, 1.58, 1.74, 1.72, 1.66, 1.94, 1.85,…\n    $ colesterol <dbl> 182, 232, 191, 200, 148, 249, 276, NA, 241, 280, 262, 198, …\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n\na.  Mostrar el número de filas del data frame, que corresponde al número de pacientes.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    \n    La función `nrow(dataframe)` permite mostrar el número de filas del data frame `dataframe`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    nrow(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 14\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n\na.  Mostrar 5 filas aleatorias del data frame.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n\n    La función `sample(vector, n)` permite seleccionar `n` elementos aleatorios de `vector`. El muestreo es sin reemplazamiento.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[sample(nrow(df), 5), ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 5 × 6\n      nombre                      edad sexo   peso altura colesterol\n      <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl>\n    1 Javier García Sánchez         24 H        NA   1.81        191\n    2 Pilar Martín González         22 M        60   1.66         NA\n    3 José María de la Guía Sanz    58 H        78   1.87        198\n    4 Pedro Gálvez Tenorio          35 H        90   1.94        241\n    5 Carolina Rubio Moreno         20 M        61   1.77        194\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    ## Tidyverse\n\n    La función `sample_n(dataframe, n)` del paquete `dplyr` de `tidyverse` permite seleccionar `n` filas aleatorias del data frame `dataframe`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> sample_n(5)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 5 × 6\n      nombre                           edad sexo   peso altura colesterol\n      <chr>                           <dbl> <chr> <dbl>  <dbl>      <dbl>\n    1 Carolina Rubio Moreno              20 M        61   1.77        194\n    2 Miguel Angel Cuadrado Gutiérrez    27 H       109   1.98        210\n    3 Antonio Fernández Ocaña            51 H        62   1.72        276\n    4 Javier García Sánchez              24 H        NA   1.81        191\n    5 José María de la Guía Sanz         58 H        78   1.87        198\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n\na.  Obtener los datos de colesterol de los pacientes.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df$colesterol\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     [1] 182 232 191 200 148 249 276  NA 241 280 262 198 210 194\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    ## Tidyverse\n    Con la función [`select`](https://dplyr.tidyverse.org/reference/select.html) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> select(colesterol)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 14 × 1\n       colesterol\n            <dbl>\n     1        182\n     2        232\n     3        191\n     4        200\n     5        148\n     6        249\n     7        276\n     8         NA\n     9        241\n    10        280\n    11        262\n    12        198\n    13        210\n    14        194\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n\na.  Obtener los datos del quinto paciente.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df[5, ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 1 × 6\n      nombre                edad sexo   peso altura colesterol\n      <chr>                <dbl> <chr> <dbl>  <dbl>      <dbl>\n    1 Marisa López Collado    46 M        51   1.58        148\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n\n    ## Tidyverse\n    Con la función [`slice`](https://dplyr.tidyverse.org/reference/slice.html) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`.\n\n\n\n\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |> slice(5)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 1 × 6\n      nombre                edad sexo   peso altura colesterol\n      <chr>                <dbl> <chr> <dbl>  <dbl>      <dbl>\n    1 Marisa López Collado    46 M        51   1.58        148\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n\n\n\n    :::\n    :::\n:::\n\n## Ejercicios Propuestos\n\n:::{#exr-vectores-2}\nLa siguiente tabla contiene las notas de un grupo de alumnos en dos asignaturas.\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Alumno |Grupo | Física| Química|\n|:------|:-----|------:|-------:|\n|Juan   |A     |    7.0|     6.7|\n|María  |B     |    3.5|     5.0|\n|Pedro  |B     |    6.0|     7.1|\n|Ana    |A     |    5.2|     4.5|\n|Luis   |A     |    4.5|      NA|\n|Sara   |B     |    9.0|     9.2|\n\n\n:::\n:::\n\n\n\n\n\n\n\n\na.  Crear un vector con los nombres de los alumnos.\n\na.  Crear un factor el grupo.\n\na.  Crear un vector con las notas de Física y otro con las notas de Química.\n\na.  Crear un vector con la nota media de las dos asignaturas.\n\na.  Crear un vector booleano con los alumnos que han aprobado el curso. Para aprobar el curso, la nota media de las dos asignaturas debe ser mayor o igual a 5.\n\na.  Crear un vector con los nombres de los alumnos que han aprobado el curso.\n\na.  Crear un data frame con los nombres de los alumnos, sus notas y su media reutilizando los vectores anteriores.\n\na.  Guardar el data frame en un fichero csv.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}