[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Prácticas de Estadística con R",
    "section": "",
    "text": "¡Bienvenido a Prácticas de Estadística con R!\nEste libro presenta una recopilación de prácticas de Estadística Descriptiva e Inferencial con el lenguaje de programación R, con problemas aplicados a las Ciencias y las Ingenierías.\nNo es un libro para aprender a programar con R, ya que solo enseña el uso del lenguaje y de algunos de sus paquetes para resolver problemas de Estadística. Para quienes estén interesados en aprender a programar en este lenguaje, os recomiendo leer este manual de R."
  },
  {
    "objectID": "index.html#capítulos",
    "href": "index.html#capítulos",
    "title": "Prácticas de Estadística con R",
    "section": "Capítulos",
    "text": "Capítulos\n\n\n\n\n\n\n\nDistribuciones de frecuencias y representaciones gráficas\n\n\n\n\n\n\n\n\n\n\nEstadística Descriptiva\n\n\n\n\n\n\n\n\n\n\nIntroducción a R\n\n\n\n\n\n\n\n\n\n\nPreprocesamiento de datos\n\n\n\n\n\n\n\n\n\n\nRegresión\n\n\n\n\n\n\n\nNo hay resultados"
  },
  {
    "objectID": "index.html#licencia",
    "href": "index.html#licencia",
    "title": "Prácticas de Estadística con R",
    "section": "Licencia",
    "text": "Licencia\nEsta obra está bajo una licencia Reconocimiento – No comercial – Compartir bajo la misma licencia 3.0 España de Creative Commons. Para ver una copia de esta licencia, visite https://creativecommons.org/licenses/by-nc-sa/3.0/es/.\nCon esta licencia eres libre de:\n\nCopiar, distribuir y mostrar este trabajo.\nRealizar modificaciones de este trabajo.\n\nBajo las siguientes condiciones:\n\nReconocimiento. Debe reconocer los créditos de la obra de la manera especificada por el autor o el licenciador (pero no de una manera que sugiera que tiene su apoyo o apoyan el uso que hace de su obra).\nNo comercial. No puede utilizar esta obra para fines comerciales.\nCompartir bajo la misma licencia. Si altera o transforma esta obra, o genera una obra derivada, sólo puede distribuir la obra generada bajo una licencia idéntica a ésta.\n\nAl reutilizar o distribuir la obra, tiene que dejar bien claro los términos de la licencia de esta obra.\nEstas condiciones pueden no aplicarse si se obtiene el permiso del titular de los derechos de autor.\nNada en esta licencia menoscaba o restringe los derechos morales del autor."
  },
  {
    "objectID": "01-intro.html#instalación-de-r",
    "href": "01-intro.html#instalación-de-r",
    "title": "1  Introducción a R",
    "section": "1.1 Instalación de R",
    "text": "1.1 Instalación de R\nR puede descargarse desde el sitio web oficial de R o desde el repositorio principal de paquetes de R CRAN. Basta con descargar el archivo de instalación correspondiente al sistema operativo de nuestro ordenador y realizar la instalación como cualquier otro programa.\nEl intérprete de R se arranca desde la terminal, aunque en Windows incorpora su propia aplicación, pero es muy básica. En general, para trabajos serios, conviene utilizar un entorno de desarrollo para R."
  },
  {
    "objectID": "01-intro.html#entornos-de-desarrollo",
    "href": "01-intro.html#entornos-de-desarrollo",
    "title": "1  Introducción a R",
    "section": "1.2 Entornos de desarrollo",
    "text": "1.2 Entornos de desarrollo\nPor defecto el entorno de trabajo de R es en línea de comandos, lo que significa que los cálculos y los análisis se realizan mediante comandos o instrucciones que el usuario teclea en una ventana de texto. No obstante, existen distintas interfaces gráficas de usuario que facilitan su uso, sobre todo para usuarios noveles. Algunas de ellas, como las que se enumeran a continuación, son completos entornos de desarrollo que facilitan la gestión de cualquier proyecto:\n\nRStudio. Probablemente el entorno de desarrollo más extendido para programar con R ya que incorpora multitud de utilidades para facilitar la programación con R.\nRKWard. Es otra otro de los entornos de desarrollo más completos que además incluye a posibilidad de añadir nuevos menús y cuadros de diálogo personalizados.\nVisual Studio Code. Es un entorno de desarrollo de propósito general ampliamente extendido. Aunque no es un entorno de desarrollo específico para R, incluye una extensión con utilidades que facilitan mucho el desarrollo con R."
  },
  {
    "objectID": "02-preprocesamiento-datos.html#ejercicios-resueltos",
    "href": "02-preprocesamiento-datos.html#ejercicios-resueltos",
    "title": "2  Preprocesamiento de datos",
    "section": "2.1 Ejercicios Resueltos",
    "text": "2.1 Ejercicios Resueltos\nPara la realización de esta práctica se requieren los paquetes readr y dplyr de la colección de paquetes tidyverse.\n\nlibrary(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\n\n\nEjercicio 2.1 La siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.\n\n\n\n\n \n  \n    Mes \n    Ingresos \n    Gastos \n    Impuestos \n  \n \n\n  \n    Enero \n    45000 \n    33400 \n    6450 \n  \n  \n    Febrero \n    41500 \n    35400 \n    6300 \n  \n  \n    Marzo \n    51200 \n    35600 \n    7100 \n  \n\n\n\n\n\n\nCrear un data frame con los datos de la tabla.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(\n    Mes = c(\"Enero\", \"Febrero\", \"Marzo\"),\n    Ingresos = c(45000, 41500, 51200),\n    Gastos = c(33400, 35400, 35600)\n    )\ndf \n\n      Mes Ingresos Gastos\n1   Enero    45000  33400\n2 Febrero    41500  35400\n3   Marzo    51200  35600\n\n\n\n\n\n\nAñadir una nueva columna con los siguientes impuestos pagados.\n\n\n\n\n\n \n  \n    Mes \n    Impuestos \n  \n \n\n  \n    Enero \n    6450 \n  \n  \n    Febrero \n    6300 \n  \n  \n    Marzo \n    7100 \n  \n\n\n\n\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nCon las funciones básicas de R.\n\ndf$Impuestos <- c(6450, 6300, 7100)\ndf\n\n      Mes Ingresos Gastos Impuestos\n1   Enero    45000  33400      6450\n2 Febrero    41500  35400      6300\n3   Marzo    51200  35600      7100\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nCon las funciones del paquete dplyr.\n\ndf <- df %>%\n    mutate(Impuestos = c(6450, 6300, 7100))\ndf\n\n      Mes Ingresos Gastos Impuestos\n1   Enero    45000  33400      6450\n2 Febrero    41500  35400      6300\n3   Marzo    51200  35600      7100\n\n\n\n\n\n\nAñadir una nueva fila con los siguientes datos de Abril.\n\n\n\n\n\n \n  \n    Mes \n    Ingresos \n    Gastos \n    Impuestos \n  \n \n\n  \n    Abril \n    49700 \n    36300 \n    6850 \n  \n\n\n\n\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nCon las funciones básicas de R.\n\ndf <- rbind(df, list(Mes = \"Abril\", Ingresos = 49700, Gastos = 36300, Impuestos = 6850))\ndf\n\n      Mes Ingresos Gastos Impuestos\n1   Enero    45000  33400      6450\n2 Febrero    41500  35400      6300\n3   Marzo    51200  35600      7100\n4   Abril    49700  36300      6850\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nCon las funciones del paquete dplyr.\n\n\n\n\ndf <- df %>%\n    add_row(Mes = \"Abril\", Ingresos = 49700, Gastos = 36300, Impuestos = 6850)\ndf\n\n      Mes Ingresos Gastos Impuestos\n1   Enero    45000  33400      6450\n2 Febrero    41500  35400      6300\n3   Marzo    51200  35600      7100\n4   Abril    49700  36300      6850\n\n\n\n\n\n\nCambiar los ingresos de Marzo por 50400.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf[3, \"Ingresos\"] <- 50400\ndf\n\n      Mes Ingresos Gastos Impuestos\n1   Enero    45000  33400      6450\n2 Febrero    41500  35400      6300\n3   Marzo    50400  35600      7100\n4   Abril    49700  36300      6850\n\n\n\n\n\n\nCrear una nueva columna con los beneficios de cada mes (ingresos - gastos - impuestos).\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nCon las funciones básicas de R.\n\ndf$Beneficios <- df$Ingresos - df$Gastos - df$Impuestos\ndf\n\n      Mes Ingresos Gastos Impuestos Beneficios\n1   Enero    45000  33400      6450       5150\n2 Febrero    41500  35400      6300       -200\n3   Marzo    50400  35600      7100       7700\n4   Abril    49700  36300      6850       6550\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nCon las funciones del paquete dplyr.\n\ndf <- df %>%\n    mutate(Beneficios = Ingresos - Gastos - Impuestos)\ndf\n\n      Mes Ingresos Gastos Impuestos Beneficios\n1   Enero    45000  33400      6450       5150\n2 Febrero    41500  35400      6300       -200\n3   Marzo    50400  35600      7100       7700\n4   Abril    49700  36300      6850       6550\n\n\n\n\n\n\nCrear una nueva columna con el factor Balance con dos posibles categorías: positivo si ha habido beneficios y negativo si ha habido pérdidas.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nCon las funciones básicas de R.\n\ndf$Balance <- cut(df$Beneficios, breaks = c(-Inf, 0, Inf), labels = c(\"negativo\", \"positivo\"))\ndf\n\n      Mes Ingresos Gastos Impuestos Beneficios  Balance\n1   Enero    45000  33400      6450       5150 positivo\n2 Febrero    41500  35400      6300       -200 negativo\n3   Marzo    50400  35600      7100       7700 positivo\n4   Abril    49700  36300      6850       6550 positivo\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nCon las funciones del paquete dplyr.\n\ndf <- df %>%\n    mutate(Balance = cut(Beneficios, breaks = c(-Inf, 0, Inf), labels = c(\"negativo\", \"positivo\")))\ndf\n\n      Mes Ingresos Gastos Impuestos Beneficios  Balance\n1   Enero    45000  33400      6450       5150 positivo\n2 Febrero    41500  35400      6300       -200 negativo\n3   Marzo    50400  35600      7100       7700 positivo\n4   Abril    49700  36300      6850       6550 positivo\n\n\n\n\n\n\nFiltrar el conjunto de datos para quedarse con los nombres de los meses y los beneficios de los meses con balance positivo.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nCon las funciones básicas de R.\n\ndf[df$Balance == \"positivo\", c(\"Mes\", \"Beneficios\")]\n\n    Mes Beneficios\n1 Enero       5150\n3 Marzo       7700\n4 Abril       6550\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nCon las funciones del paquete dplyr.\n\ndf %>%\n    filter(Balance == \"positivo\") %>% \n    select(Mes, Beneficios)\n\n    Mes Beneficios\n1 Enero       5150\n2 Marzo       7700\n3 Abril       6550\n\n\n\n\n\n\n\nEjercicio 2.2 El fichero colesterol.csv contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\nCrear un data frame con los datos de todos los pacientes del estudio a partir del fichero colesterol.csv.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nCon las funciones básicas de R.\n\ndf <- read.csv(\"https://raw.githubusercontent.com/asalber/estadistica-practicas-r/main/datos/colesterol.csv\")\ndf\n\n                            nombre edad sexo peso altura colesterol\n1     José Luis Martínez Izquierdo   18    H   85   1.79        182\n2                   Rosa Díaz Díaz   32    M   65   1.73        232\n3            Javier García Sánchez   24    H   NA   1.81        191\n4              Carmen López Pinzón   35    M   65   1.70        200\n5             Marisa López Collado   46    M   51   1.58        148\n6                Antonio Ruiz Cruz   68    H   66   1.74        249\n7          Antonio Fernández Ocaña   51    H   62   1.72        276\n8            Pilar Martín González   22    M   60   1.66         NA\n9             Pedro Gálvez Tenorio   35    H   90   1.94        241\n10         Santiago Reillo Manzano   46    H   75   1.85        280\n11           Macarena Álvarez Luna   53    M   55   1.62        262\n12      José María de la Guía Sanz   58    H   78   1.87        198\n13 Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210\n14           Carolina Rubio Moreno   20    M   61   1.77        194\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nCon las funciones del paquete readr.\n\ndf <- read_csv(\"https://raw.githubusercontent.com/asalber/estadistica-practicas-r/main/datos/colesterol.csv\")\ndf\n\n# A tibble: 14 × 6\n   nombre                           edad sexo   peso altura colesterol\n   <chr>                           <dbl> <chr> <dbl>  <dbl>      <dbl>\n 1 José Luis Martínez Izquierdo       18 H        85   1.79        182\n 2 Rosa Díaz Díaz                     32 M        65   1.73        232\n 3 Javier García Sánchez              24 H        NA   1.81        191\n 4 Carmen López Pinzón                35 M        65   1.7         200\n 5 Marisa López Collado               46 M        51   1.58        148\n 6 Antonio Ruiz Cruz                  68 H        66   1.74        249\n 7 Antonio Fernández Ocaña            51 H        62   1.72        276\n 8 Pilar Martín González              22 M        60   1.66         NA\n 9 Pedro Gálvez Tenorio               35 H        90   1.94        241\n10 Santiago Reillo Manzano            46 H        75   1.85        280\n11 Macarena Álvarez Luna              53 M        55   1.62        262\n12 José María de la Guía Sanz         58 H        78   1.87        198\n13 Miguel Angel Cuadrado Gutiérrez    27 H       109   1.98        210\n14 Carolina Rubio Moreno              20 M        61   1.77        194\n\n\n\n\n\n\nCrear una nueva columna con el índice de masa corporal, usando la siguiente fórmula\n\n\\[\n\\mbox{IMC} = \\frac{\\mbox{Peso (kg)}}{\\mbox{Altura (cm)}^2}\n\\]\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- df %>%\n    mutate(imc = round(peso/altura^2))\ndf\n\n# A tibble: 14 × 7\n   nombre                           edad sexo   peso altura colesterol   imc\n   <chr>                           <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl>\n 1 José Luis Martínez Izquierdo       18 H        85   1.79        182    27\n 2 Rosa Díaz Díaz                     32 M        65   1.73        232    22\n 3 Javier García Sánchez              24 H        NA   1.81        191    NA\n 4 Carmen López Pinzón                35 M        65   1.7         200    22\n 5 Marisa López Collado               46 M        51   1.58        148    20\n 6 Antonio Ruiz Cruz                  68 H        66   1.74        249    22\n 7 Antonio Fernández Ocaña            51 H        62   1.72        276    21\n 8 Pilar Martín González              22 M        60   1.66         NA    22\n 9 Pedro Gálvez Tenorio               35 H        90   1.94        241    24\n10 Santiago Reillo Manzano            46 H        75   1.85        280    22\n11 Macarena Álvarez Luna              53 M        55   1.62        262    21\n12 José María de la Guía Sanz         58 H        78   1.87        198    22\n13 Miguel Angel Cuadrado Gutiérrez    27 H       109   1.98        210    28\n14 Carolina Rubio Moreno              20 M        61   1.77        194    19\n\n\n\n\n\n\nCrear una nueva columna con la variable obesidad recodificando la columna imc en las siguientes categorías.\n\n\n\n\nRango IMC\nCategoría\n\n\n\n\nMenor de 18.5\nBajo peso\n\n\nDe 18.5 a 24.5\nSaludable\n\n\nDe 24.5 a 30\nSobrepeso\n\n\nMayor de 30\nObeso\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- df %>%\n    mutate(Obesidad = cut(imc, breaks = c(0, 18.5, 24.5, 30, Inf), labels = c(\"Bajo peso\", \"Saludable\", \"Sobrepeso\", \"Obeso\")))\ndf\n\n# A tibble: 14 × 8\n   nombre                          edad sexo   peso altura coles…¹   imc Obesi…²\n   <chr>                          <dbl> <chr> <dbl>  <dbl>   <dbl> <dbl> <fct>  \n 1 José Luis Martínez Izquierdo      18 H        85   1.79     182    27 Sobrep…\n 2 Rosa Díaz Díaz                    32 M        65   1.73     232    22 Saluda…\n 3 Javier García Sánchez             24 H        NA   1.81     191    NA <NA>   \n 4 Carmen López Pinzón               35 M        65   1.7      200    22 Saluda…\n 5 Marisa López Collado              46 M        51   1.58     148    20 Saluda…\n 6 Antonio Ruiz Cruz                 68 H        66   1.74     249    22 Saluda…\n 7 Antonio Fernández Ocaña           51 H        62   1.72     276    21 Saluda…\n 8 Pilar Martín González             22 M        60   1.66      NA    22 Saluda…\n 9 Pedro Gálvez Tenorio              35 H        90   1.94     241    24 Saluda…\n10 Santiago Reillo Manzano           46 H        75   1.85     280    22 Saluda…\n11 Macarena Álvarez Luna             53 M        55   1.62     262    21 Saluda…\n12 José María de la Guía Sanz        58 H        78   1.87     198    22 Saluda…\n13 Miguel Angel Cuadrado Gutiérr…    27 H       109   1.98     210    28 Sobrep…\n14 Carolina Rubio Moreno             20 M        61   1.77     194    19 Saluda…\n# … with abbreviated variable names ¹​colesterol, ²​Obesidad\n\n\n\n\n\n\nSeleccionar las columnas nombre, sexo y edad.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf %>%\n    select(nombre, sexo, edad)\n\n# A tibble: 14 × 3\n   nombre                          sexo   edad\n   <chr>                           <chr> <dbl>\n 1 José Luis Martínez Izquierdo    H        18\n 2 Rosa Díaz Díaz                  M        32\n 3 Javier García Sánchez           H        24\n 4 Carmen López Pinzón             M        35\n 5 Marisa López Collado            M        46\n 6 Antonio Ruiz Cruz               H        68\n 7 Antonio Fernández Ocaña         H        51\n 8 Pilar Martín González           M        22\n 9 Pedro Gálvez Tenorio            H        35\n10 Santiago Reillo Manzano         H        46\n11 Macarena Álvarez Luna           M        53\n12 José María de la Guía Sanz      H        58\n13 Miguel Angel Cuadrado Gutiérrez H        27\n14 Carolina Rubio Moreno           M        20\n\n\n\n\n\n\nAnonimizar los datos eliminando la columna nombre.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf %>%\n    select(-nombre)\n\n# A tibble: 14 × 7\n    edad sexo   peso altura colesterol   imc Obesidad \n   <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n 1    18 H        85   1.79        182    27 Sobrepeso\n 2    32 M        65   1.73        232    22 Saludable\n 3    24 H        NA   1.81        191    NA <NA>     \n 4    35 M        65   1.7         200    22 Saludable\n 5    46 M        51   1.58        148    20 Saludable\n 6    68 H        66   1.74        249    22 Saludable\n 7    51 H        62   1.72        276    21 Saludable\n 8    22 M        60   1.66         NA    22 Saludable\n 9    35 H        90   1.94        241    24 Saludable\n10    46 H        75   1.85        280    22 Saludable\n11    53 M        55   1.62        262    21 Saludable\n12    58 H        78   1.87        198    22 Saludable\n13    27 H       109   1.98        210    28 Sobrepeso\n14    20 M        61   1.77        194    19 Saludable\n\n\n\n\n\n\nReordenar las columnas poniendo la columna sexo antes que la columna edad.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf %>%\n    select(nombre, sexo, edad, everything())\n\n# A tibble: 14 × 8\n   nombre                         sexo   edad  peso altura coles…¹   imc Obesi…²\n   <chr>                          <chr> <dbl> <dbl>  <dbl>   <dbl> <dbl> <fct>  \n 1 José Luis Martínez Izquierdo   H        18    85   1.79     182    27 Sobrep…\n 2 Rosa Díaz Díaz                 M        32    65   1.73     232    22 Saluda…\n 3 Javier García Sánchez          H        24    NA   1.81     191    NA <NA>   \n 4 Carmen López Pinzón            M        35    65   1.7      200    22 Saluda…\n 5 Marisa López Collado           M        46    51   1.58     148    20 Saluda…\n 6 Antonio Ruiz Cruz              H        68    66   1.74     249    22 Saluda…\n 7 Antonio Fernández Ocaña        H        51    62   1.72     276    21 Saluda…\n 8 Pilar Martín González          M        22    60   1.66      NA    22 Saluda…\n 9 Pedro Gálvez Tenorio           H        35    90   1.94     241    24 Saluda…\n10 Santiago Reillo Manzano        H        46    75   1.85     280    22 Saluda…\n11 Macarena Álvarez Luna          M        53    55   1.62     262    21 Saluda…\n12 José María de la Guía Sanz     H        58    78   1.87     198    22 Saluda…\n13 Miguel Angel Cuadrado Gutiérr… H        27   109   1.98     210    28 Sobrep…\n14 Carolina Rubio Moreno          M        20    61   1.77     194    19 Saluda…\n# … with abbreviated variable names ¹​colesterol, ²​Obesidad\n\n\n\n\n\n\nFiltrar el data frame para quedarse con las mujeres.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf %>%\n    filter(sexo == \"M\")\n\n# A tibble: 6 × 8\n  nombre                 edad sexo   peso altura colesterol   imc Obesidad \n  <chr>                 <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n1 Rosa Díaz Díaz           32 M        65   1.73        232    22 Saludable\n2 Carmen López Pinzón      35 M        65   1.7         200    22 Saludable\n3 Marisa López Collado     46 M        51   1.58        148    20 Saludable\n4 Pilar Martín González    22 M        60   1.66         NA    22 Saludable\n5 Macarena Álvarez Luna    53 M        55   1.62        262    21 Saludable\n6 Carolina Rubio Moreno    20 M        61   1.77        194    19 Saludable\n\n\n\n\n\n\nFiltrar el data frame para quedarse con los hombres mayores de 30 años.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf %>%\n    filter( sexo == \"H\" & edad > 30)\n\n# A tibble: 5 × 8\n  nombre                      edad sexo   peso altura colesterol   imc Obesidad \n  <chr>                      <dbl> <chr> <dbl>  <dbl>      <dbl> <dbl> <fct>    \n1 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludable\n2 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludable\n3 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludable\n4 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludable\n5 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludable\n\n\n\n\n\n\nFiltrar el data frame para eliminar las filas con datos perdidos en la columna colesterol.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf %>%\n    filter(!is.na(colesterol))\n\n# A tibble: 13 × 8\n   nombre                          edad sexo   peso altura coles…¹   imc Obesi…²\n   <chr>                          <dbl> <chr> <dbl>  <dbl>   <dbl> <dbl> <fct>  \n 1 José Luis Martínez Izquierdo      18 H        85   1.79     182    27 Sobrep…\n 2 Rosa Díaz Díaz                    32 M        65   1.73     232    22 Saluda…\n 3 Javier García Sánchez             24 H        NA   1.81     191    NA <NA>   \n 4 Carmen López Pinzón               35 M        65   1.7      200    22 Saluda…\n 5 Marisa López Collado              46 M        51   1.58     148    20 Saluda…\n 6 Antonio Ruiz Cruz                 68 H        66   1.74     249    22 Saluda…\n 7 Antonio Fernández Ocaña           51 H        62   1.72     276    21 Saluda…\n 8 Pedro Gálvez Tenorio              35 H        90   1.94     241    24 Saluda…\n 9 Santiago Reillo Manzano           46 H        75   1.85     280    22 Saluda…\n10 Macarena Álvarez Luna             53 M        55   1.62     262    21 Saluda…\n11 José María de la Guía Sanz        58 H        78   1.87     198    22 Saluda…\n12 Miguel Angel Cuadrado Gutiérr…    27 H       109   1.98     210    28 Sobrep…\n13 Carolina Rubio Moreno             20 M        61   1.77     194    19 Saluda…\n# … with abbreviated variable names ¹​colesterol, ²​Obesidad\n\n\n\n\n\n\nOrdenar el data frame según la columna nombre.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf %>%\n    arrange(nombre)\n\n# A tibble: 14 × 8\n   nombre                          edad sexo   peso altura coles…¹   imc Obesi…²\n   <chr>                          <dbl> <chr> <dbl>  <dbl>   <dbl> <dbl> <fct>  \n 1 Antonio Fernández Ocaña           51 H        62   1.72     276    21 Saluda…\n 2 Antonio Ruiz Cruz                 68 H        66   1.74     249    22 Saluda…\n 3 Carmen López Pinzón               35 M        65   1.7      200    22 Saluda…\n 4 Carolina Rubio Moreno             20 M        61   1.77     194    19 Saluda…\n 5 Javier García Sánchez             24 H        NA   1.81     191    NA <NA>   \n 6 José Luis Martínez Izquierdo      18 H        85   1.79     182    27 Sobrep…\n 7 José María de la Guía Sanz        58 H        78   1.87     198    22 Saluda…\n 8 Macarena Álvarez Luna             53 M        55   1.62     262    21 Saluda…\n 9 Marisa López Collado              46 M        51   1.58     148    20 Saluda…\n10 Miguel Angel Cuadrado Gutiérr…    27 H       109   1.98     210    28 Sobrep…\n11 Pedro Gálvez Tenorio              35 H        90   1.94     241    24 Saluda…\n12 Pilar Martín González             22 M        60   1.66      NA    22 Saluda…\n13 Rosa Díaz Díaz                    32 M        65   1.73     232    22 Saluda…\n14 Santiago Reillo Manzano           46 H        75   1.85     280    22 Saluda…\n# … with abbreviated variable names ¹​colesterol, ²​Obesidad\n\n\n\n\n\n\nOrdenar el data frame ascendentemente por la columna sexo y descendentemente por la columna edad.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf %>%\n    arrange(sexo, desc(edad))\n\n# A tibble: 14 × 8\n   nombre                          edad sexo   peso altura coles…¹   imc Obesi…²\n   <chr>                          <dbl> <chr> <dbl>  <dbl>   <dbl> <dbl> <fct>  \n 1 Antonio Ruiz Cruz                 68 H        66   1.74     249    22 Saluda…\n 2 José María de la Guía Sanz        58 H        78   1.87     198    22 Saluda…\n 3 Antonio Fernández Ocaña           51 H        62   1.72     276    21 Saluda…\n 4 Santiago Reillo Manzano           46 H        75   1.85     280    22 Saluda…\n 5 Pedro Gálvez Tenorio              35 H        90   1.94     241    24 Saluda…\n 6 Miguel Angel Cuadrado Gutiérr…    27 H       109   1.98     210    28 Sobrep…\n 7 Javier García Sánchez             24 H        NA   1.81     191    NA <NA>   \n 8 José Luis Martínez Izquierdo      18 H        85   1.79     182    27 Sobrep…\n 9 Macarena Álvarez Luna             53 M        55   1.62     262    21 Saluda…\n10 Marisa López Collado              46 M        51   1.58     148    20 Saluda…\n11 Carmen López Pinzón               35 M        65   1.7      200    22 Saluda…\n12 Rosa Díaz Díaz                    32 M        65   1.73     232    22 Saluda…\n13 Pilar Martín González             22 M        60   1.66      NA    22 Saluda…\n14 Carolina Rubio Moreno             20 M        61   1.77     194    19 Saluda…\n# … with abbreviated variable names ¹​colesterol, ²​Obesidad\n\n\n\n\n\n\n\nEjercicio 2.3 El fichero notas-curso2.csv contiene las notas de las asignaturas de un curso en varios grupos de alumnos.\n\nCrear un data frame con los datos del curso a partir del fichero notas-curso2.csv.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- read_csv(\"https://raw.githubusercontent.com/asalber/estadistica-practicas-r/main/datos/notas-curso2.csv\")\ndf\n\n# A tibble: 120 × 9\n   sexo   turno  grupo trabaja notaA notaB notaC notaD notaE\n   <chr>  <chr>  <chr> <chr>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Mujer  Tarde  C     N         5.2   6.3   3.4   2.3   2  \n 2 Hombre Mañana A     N         5.7   5.7   4.2   3.5   2.7\n 3 Hombre Mañana B     N         8.3   8.8   8.8   8     5.5\n 4 Hombre Mañana B     N         6.1   6.8   4     3.5   2.2\n 5 Hombre Mañana A     N         6.2   9     5     4.4   3.7\n 6 Hombre Mañana A     S         8.6   8.9   9.5   8.4   3.9\n 7 Mujer  Mañana A     N         6.7   7.9   5.6   4.8   4.2\n 8 Mujer  Tarde  C     S         4.1   5.2   1.7   0.3   1  \n 9 Hombre Tarde  C     N         5     5     3.3   2.7   6  \n10 Hombre Tarde  C     N         5.3   6.3   4.8   3.6   2.3\n# … with 110 more rows\n\n\n\n\n\n\nConvertir el data frame a formato largo.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf_largo <- df %>% pivot_longer(notaA:notaE, names_to = \"Asignatura\", values_to = \"Nota\")\ndf_largo\n\n# A tibble: 600 × 6\n   sexo   turno  grupo trabaja Asignatura  Nota\n   <chr>  <chr>  <chr> <chr>   <chr>      <dbl>\n 1 Mujer  Tarde  C     N       notaA        5.2\n 2 Mujer  Tarde  C     N       notaB        6.3\n 3 Mujer  Tarde  C     N       notaC        3.4\n 4 Mujer  Tarde  C     N       notaD        2.3\n 5 Mujer  Tarde  C     N       notaE        2  \n 6 Hombre Mañana A     N       notaA        5.7\n 7 Hombre Mañana A     N       notaB        5.7\n 8 Hombre Mañana A     N       notaC        4.2\n 9 Hombre Mañana A     N       notaD        3.5\n10 Hombre Mañana A     N       notaE        2.7\n# … with 590 more rows\n\n\n\n\n\n\nCrear una nueva columna con la variable calificación que contenga las calificaciones de cada asignatura.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf_largo <- df_largo %>%\n    mutate(Califiación = cut(Nota, breaks = c(0, 4.99, 6.99, 8.99, 10), labels = c(\"SS\", \"AP\", \"NT\", \"SB\")))\ndf_largo\n\n# A tibble: 600 × 7\n   sexo   turno  grupo trabaja Asignatura  Nota Califiación\n   <chr>  <chr>  <chr> <chr>   <chr>      <dbl> <fct>      \n 1 Mujer  Tarde  C     N       notaA        5.2 AP         \n 2 Mujer  Tarde  C     N       notaB        6.3 AP         \n 3 Mujer  Tarde  C     N       notaC        3.4 SS         \n 4 Mujer  Tarde  C     N       notaD        2.3 SS         \n 5 Mujer  Tarde  C     N       notaE        2   SS         \n 6 Hombre Mañana A     N       notaA        5.7 AP         \n 7 Hombre Mañana A     N       notaB        5.7 AP         \n 8 Hombre Mañana A     N       notaC        4.2 SS         \n 9 Hombre Mañana A     N       notaD        3.5 SS         \n10 Hombre Mañana A     N       notaE        2.7 SS         \n# … with 590 more rows\n\n\n\n\n\n\nFiltrar el conjunto de datos para obtener las asignaturas y las notas de las mujeres del grupo A, ordenadas de mayor a menor.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf_largo %>%\n    filter(sexo == \"Mujer\", grupo == \"A\") %>%\n    select(Asignatura, Nota) %>%\n    arrange(desc(Nota))\n\n# A tibble: 75 × 2\n   Asignatura  Nota\n   <chr>      <dbl>\n 1 notaB        9.2\n 2 notaE        9.2\n 3 notaB        8.8\n 4 notaB        8.6\n 5 notaB        8.6\n 6 notaA        8.3\n 7 notaB        8.2\n 8 notaB        8.1\n 9 notaA        8  \n10 notaB        8  \n# … with 65 more rows"
  },
  {
    "objectID": "02-preprocesamiento-datos.html#ejercicios-propuestos",
    "href": "02-preprocesamiento-datos.html#ejercicios-propuestos",
    "title": "2  Preprocesamiento de datos",
    "section": "2.2 Ejercicios Propuestos",
    "text": "2.2 Ejercicios Propuestos\n\nEjercicio 2.4 La siguiente tabla recoge las notas de los alumnos de un curso con dos asignaturas.\n\n\n\nAlumno\nSexo\nFísica\nQuímica\n\n\n\n\nCarlos\nH\n6.7\n8.1\n\n\nMaría\nM\n7.2\n9.5\n\n\nCarmen\nM\n5.5\n5\n\n\nPedro\nH\n\n4.5\n\n\nLuis\nH\n3.5\n5\n\n\nSara\nM\n6.2\n4\n\n\n\n\nDefinir cuatro vectores con el nombre, el sexo y las notas de Física y Química.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nnombre <- c(\"Carlos\", \"María\", \"Carmen\", \"Pedro\", \"Luis\", \"Sara\")\nsexo <- c(\"H\", \"M\", \"M\", \"H\", \"H\", \"M\")\nfisica <- c(6.7, 7.2, 5.5, NA, 3.5, 6.2)\nquimica <- c(8.1, 9.5, 5, 4.5, 5, 4)\n\n\n\n\n\nConvertir el sexo en un factor y mostrar sus niveles.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nsexo <- factor(sexo)\nlevels(sexo)\n\n[1] \"H\" \"M\"\n\n\n\n\n\n\nCrear un data frame con el nombre, sexo y las notas de Física y Química.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(nombre, sexo, fisica, quimica)\ndf\n\n  nombre sexo fisica quimica\n1 Carlos    H    6.7     8.1\n2  María    M    7.2     9.5\n3 Carmen    M    5.5     5.0\n4  Pedro    H     NA     4.5\n5   Luis    H    3.5     5.0\n6   Sara    M    6.2     4.0\n\n\n\n\n\n\nCrear una nueva columna con la nota media de Física y Química.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf$media <- (df$fisica + df$quimica) / 2\ndf\n\n  nombre sexo fisica quimica media\n1 Carlos    H    6.7     8.1  7.40\n2  María    M    7.2     9.5  8.35\n3 Carmen    M    5.5     5.0  5.25\n4  Pedro    H     NA     4.5    NA\n5   Luis    H    3.5     5.0  4.25\n6   Sara    M    6.2     4.0  5.10\n\n\n\n\n\n\nCrear una nueva columna booleana aprobado que tenga el valor TRUE si la media es mayor o igual que 5 y FALSE en caso contrario.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf$aprobado <- df$media >= 5\ndf\n\n  nombre sexo fisica quimica media aprobado\n1 Carlos    H    6.7     8.1  7.40     TRUE\n2  María    M    7.2     9.5  8.35     TRUE\n3 Carmen    M    5.5     5.0  5.25     TRUE\n4  Pedro    H     NA     4.5    NA       NA\n5   Luis    H    3.5     5.0  4.25    FALSE\n6   Sara    M    6.2     4.0  5.10     TRUE\n\n\n\n\n\n\nFiltrar el data frame para quedarse con el nombre y la media de las mujeres que han aprobado.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf[df$sexo == \"M\" & df$media >= 5, c(\"nombre\", \"media\")]\n\n  nombre media\n2  María  8.35\n3 Carmen  5.25\n6   Sara  5.10\n\n\n\n\n\n\n\nEjercicio 2.5 Se ha diseñado un ensayo clínico aleatorizado, doble-ciego y controlado con placebo, para estudiar el efecto de dos alternativas terapéuticas en el control de la hipertensión arterial. Se han reclutado 100 pacientes hipertensos y estos han sido distribuidos aleatoriamente en tres grupos de tratamiento. A uno de los grupos (control) se le administró un placebo, a otro grupo se le administró un inhibidor de la enzima conversora de la angiotensina (IECA) y al otro un tratamiento combinado de un diurético y un Antagonista del Calcio. Las variables respuesta final fueron las presiones arteriales sistólica y diastólica.\nLos datos con las claves de aleatorización han sido introducidos en una base de datos que reside en la central de aleatorización, mientras que los datos clínicos han sido archivados en dos archivos distintos, uno para cada uno de los dos centros participantes en el estudio.\nLas variables almacenadas en estos archivos clínicos son las siguientes:\n\nCLAVE: Clave de aleatorización\nNOMBRE: Iniciales del paciente\nF_NACIM: Fecha de Nacimiento\nF_INCLUS: Fecha de inclusión\nSEXO: Sexo (0: Hombre 1: Mujer)\nALTURA: Altura en cm.\nPESO: Peso en Kg.\nPAD_INI: Presión diastólica basal (inicial)\nPAD_FIN: Presión diastólica final\nPAS_INI: Presión sistólica basal (inicial)\nPAS_FIN: Presión sistólica final\n\nEl archivo de claves de aleatorización contiene sólo dos variables.\n\nCLAVE: Clave de aleatorización\nFARMACO: Fármaco administrado (0: Placebo, 1: IECA, 2:Ca Antagonista + diurético)\n\n\nCrear un data frame con los datos de los pacientes del hospital A (fichero de csv datos-hospital-a.csv).\nCrear un data frame con los datos de los pacientes del hospital B (fichero csv datos-hospital-b.csv).\nFusionar los datos de los dos hospitales en un nuevo data frame.\n\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nPara fusionar las filas de dos data frames con las mismas columnas usar la función rbind.\n\n\n\n\nCrear un data frame con los datos de las claves de aleatorización (fichero csv claves-aleatorizacion.csv)\nFusionar el data frame con los datos clínicos y el data frame con claves de aleatorización en un nuevo data frame.\n\n\n\n\n\n\n\nAyuda\n\n\n\n\n\nPara fusionar las columnas de dos data frames usando una misma columna como clave en ambos data frames usar la función left_join del paquete dplyr.\n\n\n\n\nConvertir en un factor el sexo.\nCrear una nueva columna para la evolución de la presión arterial diastólica restando las columnas PAS_FIN y PAS_FIN."
  },
  {
    "objectID": "03-frecuencias-graficos.html#ejercicios-resueltos",
    "href": "03-frecuencias-graficos.html#ejercicios-resueltos",
    "title": "3  Distribuciones de frecuencias y representaciones gráficas",
    "section": "3.1 Ejercicios Resueltos",
    "text": "3.1 Ejercicios Resueltos\nPara la realización de esta práctica se requieren los siguientes paquetes:\n\nlibrary(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\n# - ggplot2: para la representación gráfica.\nlibrary(knitr) # para el formateo de tablas.\nlibrary(kableExtra) # para personalizar el formato de las tablas.\n\n\nEjercicio 3.1 En una encuesta a 25 matrimonios sobre el número de hijos que tenían se obtuvieron los siguientes datos:\n\n\n\n\n\n\n1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2\n\n\n\n\nCrear un conjunto de datos con la variable hijos.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(hijos = c(1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2))\n\n\n\n\n\nConstruir la tabla de frecuencias.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara obtener las frecuencias absolutas se puede usar la función table, y para las frecuencias relativas la función prop.table ambas del paquete base de R.\n\n# Frecuencias absolutas.\nni <- table(df$hijos)\n# Frecuencias relativas\nfi <- prop.table(ni)\n# Frecuencias acumuladas.\nNi <- cumsum(ni)\n# Frecuencias relativas acumuladas.\nFi <- cumsum(fi)\n# Creación de un data frame con las frecuencias.\ntabla_frec <- cbind(ni, fi, Ni, Fi)\ntabla_frec\n\n  ni   fi Ni   Fi\n0  2 0.08  2 0.08\n1  6 0.24  8 0.32\n2 14 0.56 22 0.88\n3  2 0.08 24 0.96\n4  1 0.04 25 1.00\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la función count del paquete dplyr.\n\n\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\ncount(df, hijos) %>% \n    mutate(fi = n/sum(n), Ni = cumsum(n), Fi = cumsum(n)/sum(n)) %>%\n    kable() %>%\n    kable_styling(bootstrap_options = \"hover\", full_width = F)\n\n\n\n \n  \n    hijos \n    n \n    fi \n    Ni \n    Fi \n  \n \n\n  \n    0 \n    2 \n    0.08 \n    2 \n    0.08 \n  \n  \n    1 \n    6 \n    0.24 \n    8 \n    0.32 \n  \n  \n    2 \n    14 \n    0.56 \n    22 \n    0.88 \n  \n  \n    3 \n    2 \n    0.08 \n    24 \n    0.96 \n  \n  \n    4 \n    1 \n    0.04 \n    25 \n    1.00 \n  \n\n\n\n\n\n\n\n\n\n\nDibujar el diagrama de barras de las frecuencias absolutas, relativas, absolutas acumuladas y relativas acumuladas.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara dibujar un diagrama de barras se puede usar la función barplot del paquete graphics.\n\n# Diagrama de barras de frecuencias absolutas.\nbarplot(ni, col = \"steelblue\", main=\"Distribución del número de hijos\", xlab=\"Hijos\", ylab=\"Frecuencia absoluta\")\n\n\n\n# Diagrama de barras de frecuencias relativas.\nbarplot(fi, col = \"steelblue\", main=\"Distribución del número de hijos\", xlab=\"Hijos\", ylab=\"Frecuencia relativa\")\n\n\n\n# Diagrama de barras de frecuencias absolutas acumuladas.\nbarplot(Ni, col = \"steelblue\", main=\"Distribución acumulada del número de hijos\", xlab=\"Hijos\", ylab=\"Frecuencia absoluta acumulada\")\n\n\n\n# Diagrama de barras de frecuencias relativas acumuladas.\nbarplot(Fi, col = \"steelblue\", main=\"Distribución acumulada del número de hijos\", xlab=\"Hijos\", ylab=\"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la función la función geom_bar del paquete ggplot2.\n\nlibrary(ggplot2)\n# Diagarma de barras de frecuencias absolutas\nggplot(df, aes(x = hijos)) +\n    geom_bar(fill = \"steelblue\") + \n    labs(title = \"Distribución del número de hijos\", y = \"Frecuencia absoluta\")\n\n\n\n# Diagarma de barras de frecuencias relativas\nggplot(df, aes(x = hijos)) +\n    geom_bar(aes(y = (..count..)/sum(..count..)), fill = \"steelblue\") +\n    labs(title = \"Distribución del número de hijos\", y = \"Frecuencia relativa\")\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n# Diagarma de barras de frecuencias acumuladas\nggplot(df, aes(x = hijos)) +\n    geom_bar(aes(y = cumsum(..count..)), fill = \"steelblue\") +\n    labs(title = \"Distribución acumulada del número de hijos\", y = \"Frecuencia absoluta acumulada\")\n\n\n\n# Diagarma de barras de frecuencias acumuladas\nggplot(df, aes(x = hijos)) +\n    geom_bar(aes(y = cumsum(..count..)/sum(..count..)), fill = \"steelblue\") +\n    labs(title = \"Distribución acumulada del número de hijos\", y = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\nDibujar el polígono de frecuencias relativas.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara dibujar un diagrama de lineas se puede usar la función plot del paquete graphics.\n\n# Frecuencias relativas.\nplot(names(fi), fi, type = \"l\", col = \"steelblue\", main=\"Distribución del número de hijos\", xlab=\"Hijos\", ylab=\"Frecuencia relativa\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la función la función geom_line del paquete ggplot2.\n\nlibrary(ggplot2)\ncount(df, hijos) %>% \n    mutate(fi = n/sum(n)) %>%\n    ggplot(aes(x=hijos, y=fi)) +\n    geom_line(col = \"steelblue\") +\n    labs(title = \"Distribución del número de hijos\", y = \"Frecuencia relativa\")\n\n\n\n\n\n\n\n\n\nEjercicio 3.2 En un servicio de atención al cliente se han registrado el número de llamadas de clientes cada día del mes de noviembre, obteniendo los siguientes datos:\n\n\n\n\n\n\n15, 23, 12, 10, 28, 50, 12, 17, 20, 21, 18, 13, 11, 12, 26, 30, 6, 16, 19, 22, 14, 17, 21, 28, 9, 16, 13, 11, 16, 20\n\n\n\n\nCrear un conjunto de datos con la variable llamadas.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(llamadas = c(15, 23, 12, 10, 28, 50, 12, 17, 20, 21, 18, 13, 11, 12, 26, 30, 6, 16, 19, 22, 14, 17, 21, 28, 9, 16, 13, 11, 16, 20))\n\n\n\n\n\nDibujar el diagrama de cajas. ¿Existe algún dato atípico? En el caso de que exista, eliminarlo y proceder con los siguientes apartados.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara dibujar un diagrama de cajas se puede usar la función boxplot del paquete graphics.\n\n# Frecuencias relativas.\nboxplot(df$llamadas, col = \"steelblue\", main=\"Distribución del número de llamadas\", horizontal = T, xlab=\"Número de llamadas\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la función la función geom_boxplot del paquete ggplot2.\n\nlibrary(ggplot2)\nggplot(df, aes(x = llamadas)) +\n    geom_boxplot(fill = \"steelblue\") +\n    labs(title = \"Distribución del número de llamadas\", x = \"Número de llamadas\")\n\n\n\n\nHay un día con 50 llamadas, que es un valor atípico en comparación con el resto de días.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función cut\n\n# Eliminación del dato atípico.\ndf <- df[df$llamadas != 50, , drop = F]\n\n\n\n\n\n\n\n\nConstruir la tabla de frecuencias agrupando en 5 clases.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara agrupar los datos en intervalos se puede utilizar la función cut del paquete base de R, y para contar las frecuencias absolutas y relativas las funciones table, y prop.table respectivamente.\n\n# Frecuencias absolutas. Creación automática de 5 clases con intervalos cerrados a la izquierda.\n\n\nni <- table(cut(df$llamadas, breaks = 5, right = F))\n# Creación manual de 5 clases.\nni <- table(cut(df$llamadas, breaks = seq(5, 30, 5)))\n# Frecuencias relativas\nfi <- prop.table(ni)\n# Frecuencias acumuladas.\nNi <- cumsum(ni)\n# Frecuencias relativas acumuladas.\nFi <- cumsum(fi)\n# Creación de un data frame con las frecuencias.\ntabla_frec <- cbind(ni, fi, Ni, Fi)\ntabla_frec\n\n        ni        fi Ni        Fi\n(5,10]   3 0.1034483  3 0.1034483\n(10,15]  9 0.3103448 12 0.4137931\n(15,20]  9 0.3103448 21 0.7241379\n(20,25]  4 0.1379310 25 0.8620690\n(25,30]  4 0.1379310 29 1.0000000\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la fución count del paquete dplyr.\n\n\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\nmutate(df, llamadas_int = cut(llamadas, breaks = seq(5, 30, 5))) %>% \n    count(llamadas_int) %>%\n    mutate(fi = n/sum(n), Ni = cumsum(n), Fi = cumsum(n)/sum(n)) %>%\n    kable() %>%\n    kable_styling(bootstrap_options = \"hover\", full_width = F)\n\n\n\n \n  \n    llamadas_int \n    n \n    fi \n    Ni \n    Fi \n  \n \n\n  \n    (5,10] \n    3 \n    0.1034483 \n    3 \n    0.1034483 \n  \n  \n    (10,15] \n    9 \n    0.3103448 \n    12 \n    0.4137931 \n  \n  \n    (15,20] \n    9 \n    0.3103448 \n    21 \n    0.7241379 \n  \n  \n    (20,25] \n    4 \n    0.1379310 \n    25 \n    0.8620690 \n  \n  \n    (25,30] \n    4 \n    0.1379310 \n    29 \n    1.0000000 \n  \n\n\n\n\n\n\n\n\n\n\nDibujar el histograma de frecuencias absolutas, relativas, absolutas acumuladas y relativas acumuladas correspondiente a la tabla anterior.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara dibujar un histograma se puede usar la función hist del paquete graphics.\n\n# Histograma de frecuencias absolutas.\nhisto <- hist(df$llamadas, breaks = seq(5, 30, 5), col = \"steelblue\", main=\"Distribución del número de llamadas\", xlab=\"Llamadas\", ylab=\"Frecuencia absoluta\")\n\n\n\nni <- histo$counts\n# Histograma de frecuencias relativas.\nhisto$counts <- ni/sum(ni)\nplot(histo, col = \"steelblue\", main=\"Distribución del número de llamadas\", xlab=\"Llamadas\", ylab=\"Frecuencia relativa\")\n\n\n\n# Histograma de frecuencias absolutas acumuladas.\nhisto$counts <- cumsum(ni)\nplot(histo, col = \"steelblue\", main=\"Distribución acumulada del número de llamadas\", xlab=\"Llamadas\", ylab=\"Frecuencia absoluta acumulada\")\n\n\n\n# Histograma de frecuencias relativas acumuladas.\nhisto$counts <- cumsum(ni)/sum(ni)\nplot(histo, col = \"steelblue\", main=\"Distribución acumulada del número de llamadas\", xlab=\"Llamadas\", ylab=\"Frecuencia relativa acumulada\", )\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la función la función geom_histogram del paquete ggplot2.\n\nlibrary(ggplot2)\n# Histograma de frecuencias absolutas\nggplot(df, aes(x = llamadas)) +\n    geom_histogram(breaks = seq(5, 30, 5), fill = \"steelblue\", col = \"white\") + \n    labs(title = \"Distribución del número de llamadas\", x = \"Número de llamadas\", y = \"Frecuencia absoluta\")\n\n\n\n# Histograma de frecuencias relativas\nggplot(df, aes(x = llamadas)) +\n    geom_histogram(aes(y = (..count..)/sum(..count..)), breaks = seq(5, 30, 5), fill = \"steelblue\", col = \"white\") +\n    labs(title = \"Distribución del número de llamadas\", x = \"Número de llamadas\", y = \"Frecuencia relativa\")\n\n\n\n# Histograma de frecuencias acumuladas\nggplot(df, aes(x = llamadas)) +\n    geom_histogram(aes(y = cumsum(..count..)), breaks = seq(5, 30, 5), fill = \"steelblue\", col = \"white\") +\n    labs(title = \"Distribución acumulada del número de llamadas\", x = \"Número de llamadas\", y = \"Frecuencia absoluta acumulada\")\n\n\n\n# Histograma de frecuencias relativas acumuladas\nggplot(df, aes(x = llamadas)) +\n    geom_histogram(aes(y = cumsum(..count..)/sum(..count..)),  breaks = seq(5, 30, 5), fill = \"steelblue\", col = \"white\") +\n    labs(title = \"Distribución acumulada del número de llamadas\", x = \"Número de llamadas\", y = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\nDibujar el polígono de frecuencias relativas acumuladas (ojiva).\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara dibujar la ojiva se puede usar la función plot del paquete graphics.\n\n# Ojiva\ncortes = seq(5, 30, 5)\nni <- table(cut(df$llamadas, breaks = cortes))\nFi <- c(0, cumsum(ni)/sum(ni))\nplot(cortes, Fi, type = \"l\", col = \"steelblue\", main = \"Distribución acumulada del número de llamadas\", xlab = \"Número de llamadas\", ylab = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la función la función geom_line del paquete ggplot2.\n\nlibrary(ggplot2)\n# Ojiva\ncortes <- seq(5, 30, 5)\ntabla_frec <- mutate(df, llamadas_int = cut(df$llamadas, breaks = cortes)) %>% \n    count(llamadas_int) %>%\n    mutate(cortes = cortes[-1], Fi = cumsum(n)/sum(n)) %>%\n    select(cortes, Fi) \ntabla_frec <- rbind(data.frame(cortes = cortes[1], Fi = 0), tabla_frec)\nggplot(tabla_frec, aes(x = cortes , y = Fi)) +\n    geom_line(col = \"steelblue\") +\n    labs(title = \"Distribución del número de llamadas\", x = \"Número de llamadas\", y = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\n\nEjercicio 3.3 Los grupos sanguíneos de una muestra de 30 personas son:\n\n\n\n\n\n\nA, B, B, A, AB, 0, 0, A, B, B, A, A, A, A, AB, A, A, A, B, 0, B, B, B, A, A, A, 0, A, AB, 0\n\n\n\n\nCrear un conjunto de datos con la variable grupo_sanguíneo.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(grupo_sanguineo = c(\"A\", \"B\", \"B\", \"A\", \"AB\", \"0\", \"0\", \"A\", \"B\", \"B\", \"A\", \"A\", \"A\", \"A\", \"AB\", \"A\", \"A\", \"A\", \"B\", \"0\", \"B\", \"B\", \"B\", \"A\", \"A\", \"A\", \"0\", \"A\", \"AB\", \"0\"))\n\n\n\n\n\nConstruir la tabla de frecuencias.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara obtener las frecuencias absolutas se puede usar la función table, y para las frecuencias relativas la función prop.table ambas del paquete base de R.\n\n# Frecuencias absolutas.\nni <- table(df$grupo_sanguineo)\n# Frecuencias relativas\nfi <- prop.table(ni)\ntabla_frec <- cbind(ni, fi)\ntabla_frec\n\n   ni        fi\n0   5 0.1666667\nA  14 0.4666667\nAB  3 0.1000000\nB   8 0.2666667\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la fución count del paquete dplyr.\n\n\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\ncount(df, grupo_sanguineo) %>% \n    mutate(fi = n/sum(n)) %>%\n    kable() %>%\n    kable_styling(bootstrap_options = \"hover\", full_width = F)\n\n\n\n \n  \n    grupo_sanguineo \n    n \n    fi \n  \n \n\n  \n    0 \n    5 \n    0.1666667 \n  \n  \n    A \n    14 \n    0.4666667 \n  \n  \n    AB \n    3 \n    0.1000000 \n  \n  \n    B \n    8 \n    0.2666667 \n  \n\n\n\n\n\n\n\n\n\n\nDibujar el diagrama de sectores.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara dibujar el diagrama de sectores se puede usar la función pie del paquete graphics.\n\n# Diagrama de sectores\npie(ni, col = 1:length(ni), main = \"Distribución de los grupos sanguíneos\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar las fuciones geom_bar y coor_polar del paquete ggplot2.\n\nggplot(df, aes(x = \"\", fill = grupo_sanguineo)) +\n    # Añadir la capa de las barras.\n    geom_bar() +\n    # Añadir el sistema de coordenadas polares\n    coord_polar(theta = \"y\") +\n    labs(title = \"Distribución de los grupos sanguíneos\")\n\n\n\n\n\n\n\n\n\nEjercicio 3.4 En un estudio de población se tomó una muestra de 27 personas, y se les preguntó por su edad y estado civil, obteniendo los siguientes resultados:\n\n\n\nEstado civil\nEdad\n\n\n\n\nSoltero\n31, 45, 35, 65, 21, 38, 62, 22, 31\n\n\nCasado\n62, 39, 62, 59, 21, 62\n\n\nViudo\n80, 68, 65, 40, 78, 69, 75\n\n\nDivorciado\n31, 65, 59, 49, 65\n\n\n\n\nCrear un conjunto de datos con la variables estado_civil y edad.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(\n    edad = c(31, 45, 35, 65, 21, 38, 62, 22, 31, 62, 39, 62, 59, 21, 62, 80, 68, 65, 40, 78, 69, 75, 31, 65, 59, 49, 65), \n    estado_civil = rep(c(\"Soltero\", \"Casado\", \"Viudo\", \"Divorciado\"), c(9, 6, 7, 5)))\n\n\n\n\n\nCalcular los tamaños muestrales según estado_civil.\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nUsando la función table del paquete base de R podemos obtener las frecuencias absolutas del estado civil que es el tamaño muestral de cada grupo.\n\ntable(df$estado_civil)\n\n\n    Casado Divorciado    Soltero      Viudo \n         6          5          9          7 \n\n\n\n\n\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nUsando las funciones groub_by, summarise y n del paquete dplyr.\n\nlibrary(dplyr)\ndf %>% group_by(estado_civil) %>%\n    summarise(n = n())\n\n# A tibble: 4 × 2\n  estado_civil     n\n  <chr>        <int>\n1 Casado           6\n2 Divorciado       5\n3 Soltero          9\n4 Viudo            7\n\n\n\n\n\n\nConstruir la tabla de frecuencias de la variable edad para cada categoría de la variable estado_civil.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara dividir la muestra en grupos se puede usar la función group-by del paquete dplyr.\n\n\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\nmutate(df, edad_int = cut(edad, breaks = seq(20, 80, 10))) %>%\n    group_by(estado_civil) %>%\n    count(edad_int) %>% \n    mutate(fi = n/sum(n), Ni = cumsum(n), Fi = cumsum(n)/sum(n)) %>%\n    kable() %>%\n    kable_styling(bootstrap_options = \"hover\", full_width = F)\n\n\n\n \n  \n    estado_civil \n    edad_int \n    n \n    fi \n    Ni \n    Fi \n  \n \n\n  \n    Casado \n    (20,30] \n    1 \n    0.1666667 \n    1 \n    0.1666667 \n  \n  \n    Casado \n    (30,40] \n    1 \n    0.1666667 \n    2 \n    0.3333333 \n  \n  \n    Casado \n    (50,60] \n    1 \n    0.1666667 \n    3 \n    0.5000000 \n  \n  \n    Casado \n    (60,70] \n    3 \n    0.5000000 \n    6 \n    1.0000000 \n  \n  \n    Divorciado \n    (30,40] \n    1 \n    0.2000000 \n    1 \n    0.2000000 \n  \n  \n    Divorciado \n    (40,50] \n    1 \n    0.2000000 \n    2 \n    0.4000000 \n  \n  \n    Divorciado \n    (50,60] \n    1 \n    0.2000000 \n    3 \n    0.6000000 \n  \n  \n    Divorciado \n    (60,70] \n    2 \n    0.4000000 \n    5 \n    1.0000000 \n  \n  \n    Soltero \n    (20,30] \n    2 \n    0.2222222 \n    2 \n    0.2222222 \n  \n  \n    Soltero \n    (30,40] \n    4 \n    0.4444444 \n    6 \n    0.6666667 \n  \n  \n    Soltero \n    (40,50] \n    1 \n    0.1111111 \n    7 \n    0.7777778 \n  \n  \n    Soltero \n    (60,70] \n    2 \n    0.2222222 \n    9 \n    1.0000000 \n  \n  \n    Viudo \n    (30,40] \n    1 \n    0.1428571 \n    1 \n    0.1428571 \n  \n  \n    Viudo \n    (60,70] \n    3 \n    0.4285714 \n    4 \n    0.5714286 \n  \n  \n    Viudo \n    (70,80] \n    3 \n    0.4285714 \n    7 \n    1.0000000 \n  \n\n\n\n\n\n\n\n\n\n\nDibujar los diagramas de cajas de la edad según el estado civil. ¿Existen datos atípicos? ¿En qué grupo hay mayor dispersión?\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(df, aes(x = edad, fill = estado_civil)) +\n    geom_boxplot()\n\n\n\n\n\n\n\n\nDibujar los histogramas de la edad según el estado civil.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nggplot(df, aes(x = edad, fill = estado_civil)) +\n    geom_histogram(breaks = seq(20, 80, 10), position = \"identity\", alpha=0.4)\n\n\n\n\nPara dibujar cada histograma por separado se puede usar la función facet_wrap o facet_grid del paquete ggplot2.\n\nggplot(df, aes(x = edad, fill = estado_civil)) +\n    geom_histogram(breaks = seq(20, 80, 10)) +\n    # Añadir la faceta del estado civil\n    facet_grid(rows = vars(estado_civil))"
  },
  {
    "objectID": "03-frecuencias-graficos.html#ejercicios-propuestos",
    "href": "03-frecuencias-graficos.html#ejercicios-propuestos",
    "title": "3  Distribuciones de frecuencias y representaciones gráficas",
    "section": "3.2 Ejercicios propuestos",
    "text": "3.2 Ejercicios propuestos\nEl conjunto de datos neonatos contiene información sobre una muestra de 320 recién nacidos en un hospital durante un año que cumplieron el tiempo normal de gestación.\n\nConstruir la tabla de frecuencias de la puntuación Apgar al minuto de nacer. Si se considera que una puntuación Apgar de 3 o menos indica que el neonato está deprimido, ¿qué porcentaje de niños está deprimido en la muestra?\nComparar las distribuciones de frecuencias de las puntuaciones Apgar al minuto de nacer según si la madre es mayor o menor de 20 años. ¿En qué grupo hay más neonatos deprimidos?\nConstruir la tabla de frecuencias para el peso de los neonatos, agrupando en clases de amplitud \\(0.5\\) desde el \\(2\\) hasta el \\(4.5\\). ¿En qué intervalo de peso hay más neonatos?\nComparar la distribución de frecuencias relativas del peso de los neonatos según si la madre fuma o no. Si se considera como peso bajo un peso menor de \\(2.5\\) kg, ¿En qué grupo hay un mayor porcentaje de niños con peso bajo?\nSi en los recién nacidos se considera como peso bajo un peso menor de \\(2.5\\) kg, calcular la prevalencia del bajo peso de recién nacidos en el grupo de madres fumadoras y en el de no fumadoras.\nConstruir el diagrama de barras de la puntuación Apgar al minuto. ¿Qué puntuación Apgar es la más frecuente?\nConstruir el diagrama de frecuencias relativas acumuladas de la puntuación Apgar al minuto. ¿Por debajo de que puntuación estarán la mitad de los niños?\nComparar mediante diagramas de barras de frecuencias relativas las distribuciones de las puntuaciones Apgar al minuto según si la madre ha fumado o no durante el embarazo. ¿Qué se puede concluir?\nConstruir el histograma de pesos, agrupando en clases de amplitud \\(0.5\\) desde el \\(2\\) hasta el \\(4.5\\). ¿En qué intervalo de peso hay más niños?\nComparar la distribución de frecuencias relativas del peso de los neonatos según si la madre fuma o no. ¿En qué grupo se aprecia menor peso de los niños de la muestra?\nComparar la distribución de frecuencias relativas del peso de los neonatos según si la madre fumaba o no antes del embarazo. ¿Qué se puede concluir?\nConstruir el diagrama de caja y bigotes del peso. ¿Entre qué valores se considera que el peso de un neonato es normal? ¿Existen datos atípicos?\nComparar el diagrama de cajas y bigotes del peso, según si la madre fumó o no durante el embarazo y si era mayor o no de 20 años. ¿En qué grupo el peso tiene más dispersión central? ¿En qué grupo pesan menos los niños de la muestra?\nComparar el diagrama de cajas de la puntuación Apgar al minuto y a los cinco minutos. ¿En qué variable hay más dispersión central?"
  },
  {
    "objectID": "04-descriptiva.html#ejercicios-resueltos",
    "href": "04-descriptiva.html#ejercicios-resueltos",
    "title": "4  Estadística Descriptiva",
    "section": "4.1 Ejercicios Resueltos",
    "text": "4.1 Ejercicios Resueltos\nPara la realización de esta práctica se requieren los siguientes paquetes:\nlibrary(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\nlibrary(vtable) # para resúmenes estadísticos.\nlibrary(skimr) # para resúmenes estadísticos.\nlibrary(summarytools) # para resúmenes estadísticos.\nlibrary(knitr) # para el formateo de tablas.\nlibrary(kableExtra) # para personalizar el formato de las tablas.\n\nEjercicio 4.1 En una encuesta a 25 matrimonios sobre el número de hijos que tenían se obtuvieron los siguientes datos:\n\n\n\n\n\n\n1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2\n\n\n\n\nCrear un conjunto de datos con la variable hijos.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(hijos = c(1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2))\n\n\n\n\nCalcular el tamaño muestral.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nnrow(df)\n\n[1] 25\n\n\n\n\n\nCalcular la media.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nmean(df$hijos)\n\n[1] 1.76\n\n\n\n\n\nCalcular la mediana.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nmedian(df$hijos)\n\n[1] 2\n\n\n\n\n\nCalcular la moda.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nEl paquete base de R no tiene implementada ninguna función para calcular la moda, así que definiremos nuestra propia función.\n\nmoda <- function(x) {\nu <- unique(x) # Vector con los valores de la muestra sin repetir (sin ordenar).\ntab <- tabulate(match(x, u)) # Frecuencias absolutas de los valores en u.\nu[tab == max(tab)] # Valor con la mayor frecuencia.\n}\n\nmoda(df$hijos)\n\n[1] 2\n\n\n\n\n\nCalcular el mínimo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nmin(df$hijos)\n\n[1] 0\n\n\n\n\n\nCalcular el máximo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nmax(df$hijos)\n\n[1] 4\n\n\n\n\n\nCalcular los cuartiles.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nquantile(df$hijos, prob=c(0.25, 0.5, 0.75))\n\n25% 50% 75% \n  1   2   2 \n\n\n\n\n\nCalcular los percentiles 5 y 95.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nquantile(df$hijos, prob=c(0.05, 0.95))\n\n 5% 95% \n0.2 3.0 \n\n\n\n\n\nCalcular el rango.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nmax(df$hijos) - min(df$hijos)\n\n[1] 4\n\n\n\n\n\nCalcular el rango intecuartílico.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nIQR(df$hijos)\n\n[1] 1\n\n\n\n\n\nCalcular la varianza\n\n\n\n\n\n\nSolución\n\n\n\n\n\nR dispone de la función var para calcular la cuasivarianza o varianza corregida \\(\\sum \\frac{(x_i-\\bar x)^2}{n-1}\\), pero no dispone de una función para calcular la varianza, de manera que para calcularla hay que corregir la cuasivarianza.\n\nn <- nrow(df)\n# Cuasivarianza\nprint(paste(\"Cuasivarianza:\", var(df$hijos)))\n\n[1] \"Cuasivarianza: 0.773333333333333\"\n\n# Varianza\nprint(paste(\"Varianza: \", var(df$hijos)*(n-1)/n))\n\n[1] \"Varianza:  0.7424\"\n\n\n\n\n\nCalcular la desviación típica.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nR dispone de la función sd para calcular la cuasidesviación típica o desviación típica corregida \\(\\sqrt{\\sum \\frac{(x_i-\\bar x)^2}{n-1}}\\), pero no dispone de una función para calcular la desviación típica, de manera que para calcularla hay que corregir la cuasidesviación típica.\n\nn <- nrow(df)\n# Cuasidesviación típica\nprint(paste(\"Cuasidesviación típica:\", sd(df$hijos)))\n\n[1] \"Cuasidesviación típica: 0.879393730551528\"\n\n# Desviación típica\nprint(paste(\"Desviación típica: \", sd(df$hijos)*sqrt((n-1)/n)))\n\n[1] \"Desviación típica:  0.861626369141521\"\n\n\n\n\n\nCalcular el coeficiente de variación.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nsd(df$hijos) / abs(mean(df$hijos))\n\n[1] 0.4996555\n\n\n\n\n\nCalcular el coeficiente de asimetría.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara calcular el coeficiente de asimetría se utiliza el paquete moments.\n\nlibrary(moments)\nskewness(df$hijos)\n\n[1] 0.1068549\n\n\nComo \\(g_1\\) está próxima a \\(0\\), la distribución es casi simétrica.\n\n\n\nCalcular el coeficiente de apuntamiento.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara calcular el coeficiente de apuntamiento se utiliza el paquete moments.\n\nlibrary(moments)\nkurtosis(df$hijos)\n\n[1] 3.71169\n\n\nComo \\(g_2>0\\), la distribución es más apuntada de lo normal (leptocúrtica). Como además \\(g_2\\not\\in(-2,2)\\) se puede concluir que la muestra es demasiado apuntada para provenir de una población normal.\n\n\n\n\n\n\nEjercicio 4.2 El fichero colesterol.csv contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\nCrear un data frame con los datos de todos los pacientes del estudio a partir del fichero colesterol.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- read.csv(\"https://raw.githubusercontent.com/asalber/estadistica-practicas-r/main/datos/colesterol.csv\")\ndf\n\n                            nombre edad sexo peso altura colesterol\n1     José Luis Martínez Izquierdo   18    H   85   1.79        182\n2                   Rosa Díaz Díaz   32    M   65   1.73        232\n3            Javier García Sánchez   24    H   NA   1.81        191\n4              Carmen López Pinzón   35    M   65   1.70        200\n5             Marisa López Collado   46    M   51   1.58        148\n6                Antonio Ruiz Cruz   68    H   66   1.74        249\n7          Antonio Fernández Ocaña   51    H   62   1.72        276\n8            Pilar Martín González   22    M   60   1.66         NA\n9             Pedro Gálvez Tenorio   35    H   90   1.94        241\n10         Santiago Reillo Manzano   46    H   75   1.85        280\n11           Macarena Álvarez Luna   53    M   55   1.62        262\n12      José María de la Guía Sanz   58    H   78   1.87        198\n13 Miguel Angel Cuadrado Gutiérrez   27    H  109   1.98        210\n14           Carolina Rubio Moreno   20    M   61   1.77        194\n\n\n\n\n\nCalcular el tamaño muestral según el sexo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\n\n\n\n\nCalcular la media y la desviación típica del nivel de colesterol sin tener en cuenta los datos perdidos.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nprint(paste(\"Media:\", mean(df$colesterol, na.rm = TRUE)))\n\n[1] \"Media: 220.230769230769\"\n\nprint(paste(\"Desviación típica:\", sd(df$colesterol, na.rm = TRUE)))\n\n[1] \"Desviación típica: 39.8479481825473\"\n\n\n\n\n\nRealizar un resumen estadístico con la media, el mínimo, los cuartiles y el máximo.\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nUsando el paquete base de R.\n\nsummary(df)\n\n    nombre               edad           sexo                peso       \n Length:14          Min.   :18.00   Length:14          Min.   : 51.00  \n Class :character   1st Qu.:24.75   Class :character   1st Qu.: 61.00  \n Mode  :character   Median :35.00   Mode  :character   Median : 65.00  \n                    Mean   :38.21                      Mean   : 70.92  \n                    3rd Qu.:49.75                      3rd Qu.: 78.00  \n                    Max.   :68.00                      Max.   :109.00  \n                                                       NA's   :1       \n     altura        colesterol   \n Min.   :1.580   Min.   :148.0  \n 1st Qu.:1.705   1st Qu.:194.0  \n Median :1.755   Median :210.0  \n Mean   :1.769   Mean   :220.2  \n 3rd Qu.:1.840   3rd Qu.:249.0  \n Max.   :1.980   Max.   :280.0  \n                 NA's   :1      \n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nUsando la función st del paquete vtable.\n\nlibrary(vtable)\nst(df)\n\n\n\nSummary Statistics\n \n  \n    Variable \n    N \n    Mean \n    Std. Dev. \n    Min \n    Pctl. 25 \n    Pctl. 75 \n    Max \n  \n \n\n  \n    edad \n    14 \n    38 \n    16 \n    18 \n    25 \n    50 \n    68 \n  \n  \n    sexo \n    14 \n     \n     \n     \n     \n     \n     \n  \n  \n    ... H \n    8 \n    57% \n     \n     \n     \n     \n     \n  \n  \n    ... M \n    6 \n    43% \n     \n     \n     \n     \n     \n  \n  \n    peso \n    13 \n    71 \n    16 \n    51 \n    61 \n    78 \n    109 \n  \n  \n    altura \n    14 \n    1.8 \n    0.12 \n    1.6 \n    1.7 \n    1.8 \n    2 \n  \n  \n    colesterol \n    13 \n    220 \n    40 \n    148 \n    194 \n    249 \n    280 \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 3\n\n\n\n\n\nUsando la función skim del paquete skimr.\n\nlibrary(skimr)\nskim(df)\n\n\n\n\nData summary\n\n\n\n\nName\n\n\ndf\n\n\n\n\nNumber of rows\n\n\n14\n\n\n\n\nNumber of columns\n\n\n6\n\n\n\n\n_______________________\n\n\n\n\n\n\nColumn type frequency:\n\n\n\n\n\n\ncharacter\n\n\n2\n\n\n\n\nnumeric\n\n\n4\n\n\n\n\n________________________\n\n\n\n\n\n\nGroup variables\n\n\nNone\n\n\n\n\n\nVariable type: character\n\n\n\n\n\nskim_variable\n\n\nn_missing\n\n\ncomplete_rate\n\n\nmin\n\n\nmax\n\n\nempty\n\n\nn_unique\n\n\nwhitespace\n\n\n\n\n\n\nnombre\n\n\n0\n\n\n1\n\n\n14\n\n\n31\n\n\n0\n\n\n14\n\n\n0\n\n\n\n\nsexo\n\n\n0\n\n\n1\n\n\n1\n\n\n1\n\n\n0\n\n\n2\n\n\n0\n\n\n\n\n\nVariable type: numeric\n\n\n\n\n\nskim_variable\n\n\nn_missing\n\n\ncomplete_rate\n\n\nmean\n\n\nsd\n\n\np0\n\n\np25\n\n\np50\n\n\np75\n\n\np100\n\n\nhist\n\n\n\n\n\n\nedad\n\n\n0\n\n\n1.00\n\n\n38.21\n\n\n15.62\n\n\n18.00\n\n\n24.75\n\n\n35.00\n\n\n49.75\n\n\n68.00\n\n\n▇▅▃▅▂\n\n\n\n\npeso\n\n\n1\n\n\n0.93\n\n\n70.92\n\n\n16.13\n\n\n51.00\n\n\n61.00\n\n\n65.00\n\n\n78.00\n\n\n109.00\n\n\n▇▅▅▂▂\n\n\n\n\naltura\n\n\n0\n\n\n1.00\n\n\n1.77\n\n\n0.12\n\n\n1.58\n\n\n1.70\n\n\n1.75\n\n\n1.84\n\n\n1.98\n\n\n▆▇▆▃▃\n\n\n\n\ncolesterol\n\n\n1\n\n\n0.93\n\n\n220.23\n\n\n39.85\n\n\n148.00\n\n\n194.00\n\n\n210.00\n\n\n249.00\n\n\n280.00\n\n\n▂▇▂▅▅\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 4\n\n\n\n\n\nUsando las funciones descr y dfSummary del paquete summarytools.\n\nlibrary(summarytools)\ndescr(df) %>%\nkable() %>%\nkable_styling()\n\n\n\n \n  \n      \n    altura \n    colesterol \n    edad \n    peso \n  \n \n\n  \n    Mean \n    1.7685714 \n    220.2307692 \n    38.2142857 \n    70.9230769 \n  \n  \n    Std.Dev \n    0.1150155 \n    39.8479482 \n    15.6213787 \n    16.1269006 \n  \n  \n    Min \n    1.5800000 \n    148.0000000 \n    18.0000000 \n    51.0000000 \n  \n  \n    Q1 \n    1.7000000 \n    194.0000000 \n    24.0000000 \n    61.0000000 \n  \n  \n    Median \n    1.7550000 \n    210.0000000 \n    35.0000000 \n    65.0000000 \n  \n  \n    Q3 \n    1.8500000 \n    249.0000000 \n    51.0000000 \n    78.0000000 \n  \n  \n    Max \n    1.9800000 \n    280.0000000 \n    68.0000000 \n    109.0000000 \n  \n  \n    MAD \n    0.1111950 \n    41.5128000 \n    17.7912000 \n    14.8260000 \n  \n  \n    IQR \n    0.1350000 \n    55.0000000 \n    25.0000000 \n    17.0000000 \n  \n  \n    CV \n    0.0650330 \n    0.1809372 \n    0.4087837 \n    0.2273858 \n  \n  \n    Skewness \n    0.2052057 \n    -0.0022401 \n    0.3238511 \n    0.9149779 \n  \n  \n    SE.Skewness \n    0.5973799 \n    0.6163361 \n    0.5973799 \n    0.6163361 \n  \n  \n    Kurtosis \n    -0.9852205 \n    -1.2502343 \n    -1.2886761 \n    -0.1208155 \n  \n  \n    N.Valid \n    14.0000000 \n    13.0000000 \n    14.0000000 \n    13.0000000 \n  \n  \n    Pct.Valid \n    100.0000000 \n    92.8571429 \n    100.0000000 \n    92.8571429 \n  \n\n\n\n\nprint(dfSummary(df, plain.ascii = FALSE, style = \"grid\"), method = \"render\")\n\n\n\nData Frame Summary\ndf\nDimensions: 14 x 6\n  Duplicates: 0\n\n\n  \n    \n      No\n      Variable\n      Stats / Values\n      Freqs (% of Valid)\n      Graph\n      Valid\n      Missing\n    \n  \n  \n    \n      1\n      nombre\n[character]\n      1. Antonio Fernández Ocaña2. Antonio Ruiz Cruz3. Carmen López Pinzón4. Carolina Rubio Moreno5. Javier García Sánchez6. José Luis Martínez Izquie7. José María de la Guía San8. Macarena Álvarez Luna9. Marisa López Collado10. Miguel Angel Cuadrado Gut[ 4 others ]\n      1(7.1%)1(7.1%)1(7.1%)1(7.1%)1(7.1%)1(7.1%)1(7.1%)1(7.1%)1(7.1%)1(7.1%)4(28.6%)\n      \n      14\n(100.0%)\n      0\n(0.0%)\n    \n    \n      2\n      edad\n[integer]\n      Mean (sd) : 38.2 (15.6)min ≤ med ≤ max:18 ≤ 35 ≤ 68IQR (CV) : 25 (0.4)\n      12 distinct values\n      \n      14\n(100.0%)\n      0\n(0.0%)\n    \n    \n      3\n      sexo\n[character]\n      1. H2. M\n      8(57.1%)6(42.9%)\n      \n      14\n(100.0%)\n      0\n(0.0%)\n    \n    \n      4\n      peso\n[numeric]\n      Mean (sd) : 70.9 (16.1)min ≤ med ≤ max:51 ≤ 65 ≤ 109IQR (CV) : 17 (0.2)\n      12 distinct values\n      \n      13\n(92.9%)\n      1\n(7.1%)\n    \n    \n      5\n      altura\n[numeric]\n      Mean (sd) : 1.8 (0.1)min ≤ med ≤ max:1.6 ≤ 1.8 ≤ 2IQR (CV) : 0.1 (0.1)\n      14 distinct values\n      \n      14\n(100.0%)\n      0\n(0.0%)\n    \n    \n      6\n      colesterol\n[numeric]\n      Mean (sd) : 220.2 (39.8)min ≤ med ≤ max:148 ≤ 210 ≤ 280IQR (CV) : 55 (0.2)\n      13 distinct values\n      \n      13\n(92.9%)\n      1\n(7.1%)\n    \n  \n\nGenerated by summarytools 1.0.1 (R version 4.2.3)2023-03-31\n\n\n\n\n\n\n¿En qué variable es más representativa la media?\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nUsando la función sumtable del paquete vtable.\n\nlibrary(vtable)\nsumtable(df, summ = c('mean(x)', 'sd(x)', 'sd(x)/mean(x)'),\nsumm.names = c(\"Media\", \"Desviación Típica\", \"Coef. Variación\"))\n\nWarning in sumtable(df, summ = c(\"mean(x)\", \"sd(x)\", \"sd(x)/mean(x)\"), summ.names = c(\"Media\", : Factor variables ignore custom summ options. Cols 1 and 2 are count and percentage.\nBeware combining factors with a custom summ unless factor.numeric = TRUE.\n\n\n\n\nSummary Statistics\n \n  \n    Variable \n    Media \n    Desviación Típica \n    Coef. Variación \n  \n \n\n  \n    edad \n    38 \n    16 \n    0.41 \n  \n  \n    sexo \n    14 \n     \n     \n  \n  \n    ... H \n    8 \n    57% \n     \n  \n  \n    ... M \n    6 \n    43% \n     \n  \n  \n    peso \n    71 \n    16 \n    0.23 \n  \n  \n    altura \n    1.8 \n    0.12 \n    0.065 \n  \n  \n    colesterol \n    220 \n    40 \n    0.18 \n  \n\n\n\n\n\nLa variable con el coeficiente de variación más pequeño es la altura, por lo que es la que tiene la media más representativa.\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nUsando las funciones summarise y across del paquete dplyr.\n\nlibrary(dplyr)\nsummarise(df, across(.cols = where(is.numeric), .fns = list(Media = ~ mean(.x, na.rm = T), `Desviación Típica` = ~ sd(.x, na.rm = T), `Coef. Variación` = ~ sd(.x, na.rm=T) / mean(.x, na.rm=T)))) %>%\nkable() %>%\nkable_styling()\n\n\n\n \n  \n    edad_Media \n    edad_Desviación Típica \n    edad_Coef. Variación \n    peso_Media \n    peso_Desviación Típica \n    peso_Coef. Variación \n    altura_Media \n    altura_Desviación Típica \n    altura_Coef. Variación \n    colesterol_Media \n    colesterol_Desviación Típica \n    colesterol_Coef. Variación \n  \n \n\n  \n    38.21429 \n    15.62138 \n    0.4087837 \n    70.92308 \n    16.1269 \n    0.2273858 \n    1.768571 \n    0.1150155 \n    0.065033 \n    220.2308 \n    39.84795 \n    0.1809372 \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 3\n\n\n\n\n\nUsando las funciones group_by y summarise del paquete dplyr y pivotando el data frame a formato largo.\n\nlibrary(tidyverse)\ndf %>% select(where(is.numeric)) %>% \n    pivot_longer(everything(), names_to = \"Variable\", values_to = \"Valor\") %>%\n    group_by(Variable) %>%\n    summarise(\"Media\" = mean(Valor, na.rm = T), \n    \"Desviación Típica\" = sd(Valor, na.rm = T),\n    \"Coef. Variación\" = sd(Valor, na.rm = T) / mean(Valor, na.rm = T)) %>%\n    kable() %>%\n    kable_styling()\n\n\n\n \n  \n    Variable \n    Media \n    Desviación Típica \n    Coef. Variación \n  \n \n\n  \n    altura \n    1.768571 \n    0.1150155 \n    0.0650330 \n  \n  \n    colesterol \n    220.230769 \n    39.8479482 \n    0.1809372 \n  \n  \n    edad \n    38.214286 \n    15.6213787 \n    0.4087837 \n  \n  \n    peso \n    70.923077 \n    16.1269006 \n    0.2273858 \n  \n\n\n\n\n\nLa variable con el coeficiente de variación más pequeño es la altura, por lo que es la que tiene la media más representativa.\n\n\n\nRealizar un resumen estadístico con el coeficiente de asimetría y el coeficiente de apuntamiento del peso y la estatura según el sexo. ¿Qué grupo tiene peso más normal, los hombres o las mujeres? ¿Y una estatura más normal?\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nUsando la función sumtable del paquete vtable.\n\nlibrary(vtable)\nsumtable(df, vars = c(\"peso\", \"altura\"), group = \"sexo\", summ = c('skewness(x)', 'kurtosis(x)'),\nsumm.names = c(\"Coef. Asimetría\", \"Coef. Apuntamiento\"))\n\nWarning in sumtable(df, vars = c(\"peso\", \"altura\"), group = \"sexo\", summ = c(\"skewness(x)\", : Factor variables ignore custom summ options. Cols 1 and 2 are count and percentage.\nBeware combining factors with a custom summ unless factor.numeric = TRUE.\n\n\n\n\nSummary Statistics\n \n\nsexo\nH\nM\n\n  \n    Variable \n    Coef. Asimetría \n    Coef. Apuntamiento \n    Coef. Asimetría \n    Coef. Apuntamiento \n  \n \n\n  \n    peso \n    0.61 \n    2.5 \n    -0.47 \n    1.9 \n  \n  \n    altura \n    0.27 \n    1.9 \n    -0.07 \n    1.8 \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nUsando las funciones group_by y summarise del paquete dplyr.\n\nlibrary(dplyr)\ndf %>% select(sexo, peso, altura) %>%\ngroup_by(sexo) %>%\nsummarise(across(.cols = everything(), .fns = list(\"Coef. Asimetría\" = ~ skewness(.x, na.rm = T), \"Coef. Apuntamiento\" = ~ kurtosis(.x, na.rm = T)))) %>%\nkable() %>%\nkable_styling()\n\n\n\n \n  \n    sexo \n    peso_Coef. Asimetría \n    peso_Coef. Apuntamiento \n    altura_Coef. Asimetría \n    altura_Coef. Apuntamiento \n  \n \n\n  \n    H \n    0.6107239 \n    2.508255 \n    0.2668417 \n    1.904435 \n  \n  \n    M \n    -0.4661293 \n    1.852431 \n    -0.0699589 \n    1.756341 \n  \n\n\n\n\n\nLas mujeres tienen un peso más normal ya que tanto el coeficiente de asimetría como el de apuntamiento están más próximos a 0. Lo mismo ocurre con la altura."
  },
  {
    "objectID": "04-descriptiva.html#ejercicios-propuestos",
    "href": "04-descriptiva.html#ejercicios-propuestos",
    "title": "4  Estadística Descriptiva",
    "section": "4.2 Ejercicios propuestos",
    "text": "4.2 Ejercicios propuestos\n\nEjercicio 4.3 El fichero renta-media-comunidades-autonomas.csv contiene información sobre la renta neta media por persona de las comunidades autónomas desde 2008 a 2021.\n\nCrear un data frame con los datos de las rentas medias por persona de las comunidades a partir del fichero renta-media-comunidades-autonomas.csv.\n:::{.callout-tip collapse=“true”} ## Solución\n\n\ndf <- read_csv2(\"https://aprendeconalf.es/estadistica-practicas-r/datos/renta-media-comunidades-autonomas.csv\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nRows: 19 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (1): Comunidad\ndbl (14): 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, 2012, 2011, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndf\n\n# A tibble: 19 × 15\n   Comunidad      `2021` `2020` `2019` `2018` `2017` `2016` `2015` `2014` `2013`\n   <chr>           <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 Andalucía        9915   9990   9160   9258   9116   8398   7942   8079   8408\n 2 Aragón          13345  13097  12300  11990  12110  11649  12427  12037  12022\n 3 Asturias Prin…  12861  12786  12523  12085  12244  12060  11427  11251  11211\n 4 Balears Illes   11235  12658  12410  13240  12665  12222  10828  10660  10386\n 5 Canarias        10161   9935   9487   8964   8863   8702   8640   8302   8513\n 6 Cantabria       12848  12748  12205  11239  11293  10670  10494   9824   9843\n 7 Castilla y Le…  12656  12697  12003  11949  11239  10815  10570  10406  10760\n 8 Castilla - La…  10257  10485   9715   9533   9045   8731   8498   8545   8425\n 9 Cataluña        14159  14170  13527  13338  12712  12660  12283  12205  12111\n10 Comunitat Val…  11237  11332  10611  10232   9801   9265   9098   9144   9375\n11 Extremadura      9500   9147   8796   8503   8250   8674   8469   7729   8224\n12 Galicia         11453  11469  11218  11239  10753  10439  10212  10235  10106\n13 Madrid Comuni…  14836  14580  14199  13279  13099  12647  12534  12597  12823\n14 Murcia Región…   9931   9850   8956   9111   8702   8273   7924   7767   8253\n15 Navarra Comun…  15269  15094  13937  13585  13583  13408  13300  13221  13608\n16 País Vasco      15544  15813  15300  14722  14397  14345  13836  14281  14312\n17 Rioja La        12913  13504  12697  12029  12131  11589  11132  11120  10686\n18 Ceuta           10397   9853  10164   9784   9676   9435   8512   8712   9336\n19 Melilla         12012  11427  11733  12507  10161  10883  10027  11619  11313\n# ℹ 5 more variables: `2012` <dbl>, `2011` <dbl>, `2010` <dbl>, `2009` <dbl>,\n#   `2008` <dbl>\n\n\n\n\nRealizar un resumen estadístico con la media y la desviación típica, mínimo, cuartiles y máximo de todas las rentas medias.\nRealizar un resumen estadístico con la media y la desviación típica de las rentas medias de cada año.\n¿Qué año presenta una menor variabilidad relativa?\n¿En qué comunidad autónoma hay menos dispersión relativa con respecto a la media?\n¿En qué comunidad autónoma es más representativa la media de las rentas?\n¿Qué comunidad autónoma presenta una distribución de las rentas más normal a lo largo de los años?\n¿Qué comunidades autónomas tienen una renta media por debajo del percentil 10? ¿Y cuáles tienen una renta media por encima del percentil 90?\nCrear la variable riqueza que clasifique las comunidades según la media de sus rentas en baja (por debajo del primer cuartil), media (entre el primer y el tercer cuartil) y alta (por encima del tercer cuartil).\nHacer un resumen estadístico con la media, cuartiles, desviación típica, coeficiente de variación, coeficiente de asimetría y coeficiente de curtosis de las rentas medias según la riqueza. :::"
  },
  {
    "objectID": "05-regresion.html#ejercicios-resueltos",
    "href": "05-regresion.html#ejercicios-resueltos",
    "title": "5  Regresión",
    "section": "5.1 Ejercicios Resueltos",
    "text": "5.1 Ejercicios Resueltos\nPara la realización de esta práctica se requieren los siguientes paquetes:\nlibrary(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\nlibrary(broom) # para el ajuste de modelos de regresión por grupos\nlibrary(knitr) # para el formateo de tablas.\nlibrary(kableExtra) # para personalizar el formato de las tablas.\nTambién se necesita conocer las ecuaciones de los principales modelos de regresión, que se resumen en la siguiente tabla.\n\n\n\nModelo\nEcuación general\n\n\n\n\nLineal\n\\(y=a+bx\\)\n\n\nParabólico\n\\(y=a+bx+cx^2\\)\n\n\nPolinómico de grado \\(n\\)\n\\(y=a_0+a_1x+\\cdots+a_nx^n\\)\n\n\nPotencial\n\\(y=ax^b\\)\n\n\nExponencial\n\\(y=e^{a+bx}\\)\n\n\nLogarítmico\n\\(y=a+b\\log x\\)\n\n\nInverso\n\\(y=a+b/x\\)\n\n\nCurva S o Sigmoidal\n\\(y= e^{a+b/x}\\)\n\n\n\n\nEjercicio 5.1 Se han medido dos variables \\(X\\) e \\(Y\\) en 10 individuos obteniendo los siguientes resultados:\n\\[\n\\begin{array}{lrrrrrrrrrr}\n\\hline\nX & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 \\\\\nY & 2 & 5 & 8 & 11 & 14 & 17 & 20 & 23 & 26 & 29\\\\\n\\hline\n\\end{array}\n\\]\n\nCrear un conjunto de datos con las variables x e y.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(\n    x = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),\n    y = c(2, 5, 8, 11, 14, 17, 20, 23, 26, 29)\n)\n\n\n\n\nDibujar el diagrama de dispersión correspondiente. ¿Qué tipo de modelo de regresión se ajusta mejor a la nube de puntos?\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara dibujar un diagrama de dispersión se puede usar la función plot del paquete graphics.\n\nplot(df$x, df$y, xlab = \"X\", ylab = \"Y\", main = \"Diagrama de dispersión\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la función la función geom_point del paquete ggplot2.\n\nlibrary(ggplot2)\nggplot(df, aes(x = x, y = y)) +\n    geom_point(col = \"red\") +\n    labs(title = \"Diagrama de dispersión\", x = \"X\", y = \"Y\")\n\n\n\n\nEl tipo de modelo que mejor se ajusta es lineal, ya que todos los puntos están alineados.\n\n\n\nCalcular la recta de regresión de \\(Y\\) sobre \\(X\\).\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara ajustar un modelo de regresión se utiliza la función lm del paquete stats. Esta función requiere que se le pase como parámetro la fórmula del modelo de regresión que debe tener la sintaxis y ~ f(x), donde y es la variable dependiente en el modelo, x es la variable independiente, y f(x) es una expresión matemática que describe el modelo.\n\nrecta_y_x <- lm(y ~ x, df) \nsummary(recta_y_x)\n\nWarning in summary.lm(recta_y_x): essentially perfect fit: summary may be\nunreliable\n\n\n\nCall:\nlm(formula = y ~ x, data = df)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-3.675e-15 -8.783e-16  5.168e-16  9.646e-16  1.944e-15 \n\nCoefficients:\n             Estimate Std. Error   t value Pr(>|t|)    \n(Intercept) 2.000e+00  1.049e-15 1.906e+15   <2e-16 ***\nx           3.000e+00  1.965e-16 1.527e+16   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.785e-15 on 8 degrees of freedom\nMultiple R-squared:      1, Adjusted R-squared:      1 \nF-statistic: 2.33e+32 on 1 and 8 DF,  p-value: < 2.2e-16\n\n\nLa recta de regresión de \\(Y\\) sobre \\(X\\) es \\(y = 2 + 3 x\\).\n\n\n\nObtener el coeficiente de regresión de la recta anterior e interpretarlo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nEl coeficiente de regresión es la pendiente de la recta de regresión\n\ncat(paste(\"Coeficiente de regresión de Y sobre X:\", recta_y_x$coefficients[[\"x\"]]))\n\nCoeficiente de regresión de Y sobre X: 3\n\n\nEl coeficiente de regresión de \\(Y\\) sobre \\(X\\) vale 3, lo que indica que \\(Y\\) aumenta 3 unidades por cada unidad que aumenta \\(X\\).\n\n\n\nDibujar la recta de regresión de \\(Y\\) sobre \\(X\\) sobre el diagrama de dispersión. ¿Cómo son los residuos del modelo de regresión?\n\n\n\n\n\n\nSolución 1\n\n\n\n\n\nPara dibujar la recta de regresión se puede usar la función abline del paquete graphics.\n\nplot(df$x, df$y, xlab = \"X\", ylab = \"Y\", main = \"Diagrama de dispersión\")\nabline(recta_y_x)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolución 2\n\n\n\n\n\nOtra alternativa es usar la geometría de ajuste de regresión por mínimos cuadrados geom_smooth del paquete ggplot2.\n\nlibrary(ggplot2)\nggplot(df, aes(x = x, y = y)) +\n    geom_point(col = \"red\") +\n    geom_smooth(method = \"lm\") +\n    labs(title = \"Diagrama de dispersión\", x = \"X\", y = \"Y\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nComo la recta pasa por todos los puntos del diagrama de dispersión, los residuos son nulos.\n\n\n\nCalcular el coeficiente de determinación del modelo lineal e interpretarlo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ncat(paste(\"Coeficiente de determinación lineal R²:\", summary(recta_y_x)$r.squared))\n\nWarning in summary.lm(recta_y_x): essentially perfect fit: summary may be\nunreliable\n\n\nCoeficiente de determinación lineal R²: 1\n\n\nComo el coeficiente de determinación lineal vale 1, el ajuste de la recta de regresión es perfecto.\n\n\n\nCalcular la recta de regresión de \\(X\\) sobre \\(Y\\). ¿Coincide con la recta de regresión de \\(Y\\) sobre \\(X\\)?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nrecta_x_y <- lm(x ~ y, df) \nsummary(recta_x_y)\n\nWarning in summary.lm(recta_x_y): essentially perfect fit: summary may be\nunreliable\n\n\n\nCall:\nlm(formula = x ~ y, data = df)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-1.435e-15 -5.090e-16 -2.062e-17  3.798e-16  1.943e-15 \n\nCoefficients:\n              Estimate Std. Error    t value Pr(>|t|)    \n(Intercept) -6.667e-01  6.179e-16 -1.079e+15   <2e-16 ***\ny            3.333e-01  3.484e-17  9.567e+15   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 9.494e-16 on 8 degrees of freedom\nMultiple R-squared:      1, Adjusted R-squared:      1 \nF-statistic: 9.153e+31 on 1 and 8 DF,  p-value: < 2.2e-16\n\n\nLa recta de regresión de \\(X\\) sobre \\(Y\\) es \\(x = -0.6666667 + 0.3333333 x\\), que es la misma que la recta de \\(Y\\) sobre \\(X\\), ya que el ajuste es perfecto, y tanto los residuos en \\(Y\\) como los residuos en \\(X\\) valen cero para esta recta.\n\n\n\n\n\n\nEjercicio 5.2 El fichero horas-estudio.csv contiene información sobre las horas de estudio diarias de una muestra de alumnos de ingeniería, y el número de asignaturas suspendidas al final del curso.\n\nCrear un data frame con los datos de las horas de estudio y los suspensos a partir del fichero horas-estudio.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(readr)\ndf <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/horas-estudio.csv\")\n\nRows: 30 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (2): Horas, Suspensos\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndf\n\n# A tibble: 30 × 2\n   Horas Suspensos\n   <dbl>     <dbl>\n 1   3.5         1\n 2   0.6         5\n 3   2.8         1\n 4   2.5         3\n 5   2.6         1\n 6   3.9         0\n 7   1.5         3\n 8   0.7         3\n 9   3.6         1\n10   3.7         1\n# ℹ 20 more rows\n\n\n\n\n\nDibujar el diagrama de dispersión correspondiente. ¿Qué tipo de modelo de regresión se ajusta mejor a la nube de puntos?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(df, aes(x = Horas, y = Suspensos)) +\n    geom_point(col = \"red\") +\n    labs(title = \"Diagrama de dispersión\", x = \"Horas de estudio\", y = \"Asignaturas suspensas\")\n\n\n\n\nEl tipo de modelo que mejor se ajusta es lineal, ya que hay una tendencia lineal en la nube de puntos y además es inversa.\n\n\n\nCalcular la recta de regresión de los suspensos sobre las horas de estudio.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nrecta_suspensos_horas <- lm(Suspensos ~ Horas, df) \nsummary(recta_suspensos_horas)\n\n\nCall:\nlm(formula = Suspensos ~ Horas, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.03614 -0.53214 -0.02013  0.49187  1.22587 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   4.8491     0.2622   18.49  < 2e-16 ***\nHoras        -1.2300     0.1106  -11.12  8.7e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.6359 on 28 degrees of freedom\nMultiple R-squared:  0.8155,    Adjusted R-squared:  0.8089 \nF-statistic: 123.8 on 1 and 28 DF,  p-value: 8.7e-12\n\n\nLa recta de regresión de los suspensos sobre las horas es \\(\\textsf{suspensos}= 4.8491273 + -1.2299972 \\textsf{horas}\\).\n\n\n\nObtener el coeficiente de regresión de la recta anterior e interpretarlo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ncat(paste(\"Coeficiente de regresión de Suspensos sobre Horas:\", recta_suspensos_horas$coefficients[[\"Horas\"]]))\n\nCoeficiente de regresión de Suspensos sobre Horas: -1.22999717844331\n\n\nEl coeficiente de regresión de los suspensos sobre las horas de estudio vale -1.2299972, lo que indica que por cada hora de estudio se obtendrán 1.2299972 suspensos menos al final del curso.\n\n\n\nDibujar la recta de regresión sobre el diagrama de dispersión. ¿El ajuste es mejor o peor que el del ejercicio anterior?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(df, aes(x = Horas, y = Suspensos)) +\n    geom_point(col = \"red\") +\n    geom_smooth(method = \"lm\") +\n    labs(title = \"Diagrama de dispersión\", x = \"Horas de estudio\", y = \"Asignaturas suspensas\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nEn este caso el ajuste no es perfecto, ya que es imposible que la recta pase por todos los puntos como ocurría en el ejercicio anterior. Por tanto, el ajuste es peor.\n\n\n\nCalcular el coeficiente de determinación del modelo lineal e interpretarlo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ncat(paste(\"Coeficiente de determinación lineal R²:\", summary(recta_suspensos_horas)$r.squared))\n\nCoeficiente de determinación lineal R²: 0.81549948723949\n\n\nComo el coeficiente de determinación lineal vale 0.8154995 que está bastante próximo a 1, el ajuste es bueno, y el modelo puede utilizarse con fines predictivos.\n\n\n\nUtilizar la recta de regresión para predecir el número de suspensos correspondiente a 3 horas de estudio diarias. ¿Es fiable esta predicción?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\npredict.lm(recta_suspensos_horas, newdata = list(Horas = 3))\n\n       1 \n1.159136 \n\n\nLa predicción será fiable ya que el coeficiente de determinación está próximo a 1 y el tamaño de la muestra no es muy pequeño.\n\n\n\nSegún el modelo lineal, ¿cuántas horas diarias tendrá que estudiar como mínimo un alumno si quiere aprobarlo todo?\n\n\n\n\n\n\nSolución\n\n\n\n\n\nComo ahora queremos predecir el número de horas de estudio, necesitamos calcular la recta de regresión de la horas sobre los suspensos.\n\nrecta_horas_suspensos <- lm(Horas ~ Suspensos, df) \npredict.lm(recta_horas_suspensos, newdata = list(Suspensos = 0))\n\n       1 \n3.607387 \n\n\n\n\n\n\n\n\nEjercicio 5.3 Después de tomar un litro de vino se ha medido la concentración de alcohol en la sangre en distintos instantes, obteniendo los siguientes datos\n\\[\n\\begin{array}{lrrrrrrr}\n\\hline\n\\mbox{Tiempo después (minutos)} & 30 & 60 & 90 & 120 & 150 & 180 & 210\\\\\n\\mbox{Alcohol (gramos/litro)} & 1.6 & 1.7 & 1.5 & 1.1 & 0.7 & 0.2 & 2.1\\\\\n\\hline\n\\end{array}\n\\]\n\nCrear un data frame con los datos del tiempo y la concentración de alcohol.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf <- data.frame(\n    Tiempo = c(30, 60, 90, 120, 150, 180, 210),\n    Alcohol = c(1.6, 1.7, 1.5, 1.1, 0.7, 0.2, 2.1)\n)\ndf\n\n  Tiempo Alcohol\n1     30     1.6\n2     60     1.7\n3     90     1.5\n4    120     1.1\n5    150     0.7\n6    180     0.2\n7    210     2.1\n\n\n\n\n\nCalcular el coeficiente de correlación lineal. ¿Existe relación lineal entre la concentración de alcohol y el tiempo que pasa?\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara calcular el coeficiente de correlación lineal de Pearson se puede utilar la función cor del paquete stats.\n\ncor(df$Tiempo, df$Alcohol)\n\n[1] -0.2730367\n\n\nEl valore del coeficiente de correlación lineal es muy bajo, por lo que aparentemente no hay relación lineal entre la concentración de alcohol en sangre y el tiempo que pasa.\n\n\n\nDibujar el diagrama de dispersión correspondiente y la recta de regresión de la concentración de alcohol sobre el tiempo. ¿Por qué el ajuste es tan malo?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(df, aes(x = Tiempo, y = Alcohol)) +\n    geom_point(col = \"red\") +\n    geom_smooth(method = \"lm\") +\n    labs(title = \"Diagrama de dispersión\", x = \"Tiempo en minutos\", y = \"Concentración de alcohol en sangre (g/l)\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nEl ajuste es malo porque hay un dato atípico que no sigue la misma tendencia que el resto.\n\n\n\nEliminar el dato atípico y calcular la recta de la concentración de alcohol sobre el tiempo. ¿Ha mejorado el modelo?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n# Eliminamos el dato atípico que está en la fila \ndf <- df[-c(7), ]\nrecta_alcohol_tiempo <- lm(Alcohol ~ Tiempo, df) \nsummary(recta_alcohol_tiempo)\n\n\nCall:\nlm(formula = Alcohol ~ Tiempo, data = df)\n\nResiduals:\n       1        2        3        4        5        6 \n-0.27619  0.12095  0.21810  0.11524  0.01238 -0.19048 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  2.173333   0.201927  10.763 0.000423 ***\nTiempo      -0.009905   0.001728  -5.731 0.004591 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2169 on 4 degrees of freedom\nMultiple R-squared:  0.8914,    Adjusted R-squared:  0.8643 \nF-statistic: 32.84 on 1 and 4 DF,  p-value: 0.004591\n\n\nLa recta de regresión de la concentración de alcohol en sangre sobre el tiempo es \\(\\textsf{alcohol}= 2.1733333 + -0.0099048 \\textsf{tiempo}\\).\nEl modelo ha mejorado notablemente ya que ahora el coeficiente de determinación lineal \\(R^2=0.8914286\\), que está muy próximo a 1.\n\n\n\nSegún el modelo de regresión lineal, ¿a qué velocidad metaboliza esta persona el alcohol?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ncat(paste(\"Coeficiente de regresión de la concentración de alchol sobre el tiempo:\", recta_alcohol_tiempo$coefficients[[\"Tiempo\"]]))\n\nCoeficiente de regresión de la concentración de alchol sobre el tiempo: -0.00990476190476191\n\n\nAsí pues, la velocidad de metabolización del alcohol es 0.0099048 g/l\\(\\cdot\\)min.\n\n\n\nSi la concentración máxima de alcohol en la sangre que permite la ley para poder conducir es \\(0.3\\) g/l, ¿cuánto tiempo habrá que esperar después de tomarse un litro de vino para poder conducir sin infringir la ley? ¿Es fiable esta predicción?\n\n\n\n\n\n\nSolución\n\n\n\n\n\nComo ahora queremos predecir el tiempo, necesitamos calcular la recta de regresión del tiempo sobre la concentración de alcohol.\n\nrecta_tiempo_alcohol <- lm(Tiempo ~ Alcohol, df) \npredict.lm(recta_tiempo_alcohol, newdata = list(Alcohol = 0.3))\n\n  1 \n180 \n\n\nAunque el coeficiente de determinación lineal está próximo a 1, el tamaño muestral es demasiado pequeño para que la predicción sea fiable.\n\n\n\n\n\n\nEjercicio 5.4 El fichero pib-usa.csv contiene información sobre el producto interior bruto de Estados Unidos en billones de dólares americanos desde 1947 hasta 2022.\n\nCrear un data frame con los datos del PIB y los años a partir del fichero pib-usa.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(readr)\ndf <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/pib-usa.csv\")\n\nRows: 76 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (2): Año, PIB\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndf\n\n# A tibble: 76 × 2\n     Año   PIB\n   <dbl> <dbl>\n 1  1947  244.\n 2  1948  267.\n 3  1949  276.\n 4  1950  282.\n 5  1951  338.\n 6  1952  362.\n 7  1953  390.\n 8  1954  387.\n 9  1955  415.\n10  1956  443.\n# ℹ 66 more rows\n\n\n\n\n\nDibujar el diagrama de dispersión que represente la evolución anual del PIB. ¿Qué tipo de modelo de regresión se ajusta mejor a la nube de puntos?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(df, aes(x = Año, y = PIB)) +\n    geom_point(col = \"red\") +\n    labs(title = \"Evolución del PIB de Estados Unidos\", x = \"Año\", y = \"PIB en billones dólares\")\n\n\n\n\nA la vista de la forma de la nube de puntos parece que la evolución del PIB es exponencial.\n\n\n\nDibujar el diagrama de dispersión del logaritmo del PIB y los años.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndf <- mutate(df, logPIB = log(PIB)) \nggplot(df, aes(x = Año, y = logPIB)) +\n        geom_point(col = \"red\") +\n        labs(title = \"Evolución del PIB de Estados Unidos\", x = \"Año\", y = \"Logaritmo del PIB en billones dólares\")\n\n\n\n\nLa nube de puntos tienen una clara forma lineal, lo que confirma que la evolución del PIB es exponencial.\n\n\n\nCalcular el modelo de regresión exponencial del PIB sobre los años.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nrecta_logPIB_años <- lm(log(PIB) ~ Año, df) \nsummary(recta_logPIB_años)\n\n\nCall:\nlm(formula = log(PIB) ~ Año, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.39115 -0.13495 -0.03532  0.17693  0.29436 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -1.215e+02  1.951e+00  -62.27   <2e-16 ***\nAño          6.527e-02  9.832e-04   66.39   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.188 on 74 degrees of freedom\nMultiple R-squared:  0.9835,    Adjusted R-squared:  0.9833 \nF-statistic:  4407 on 1 and 74 DF,  p-value: < 2.2e-16\n\n\nEl modelo de regresión exponencial que mejor explica la evolución del PIB es \\(\\textsf{PIB}= e^{-121.4998223 + 0.065271 \\textsf{Año}}\\).\n\n\n\n¿Cuál es la tasa de crecimiento porcentual anual del PIB?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ncat(paste(\"Coeficiente de regresión del logaritmo del PIB sobre los años:\", recta_logPIB_años$coefficients[[\"Año\"]]))\n\nCoeficiente de regresión del logaritmo del PIB sobre los años: 0.0652710244896027\n\n\nEl coeficiente de regresión de los suspensos sobre las horas de estudio vale 0.065271, lo que indica que la tasa de crecimiento anual del PIB es 6.5271024%.\n\n\n\nDibujar el modelo de regresión exponencial sobre el diagrama de dispersión.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(df, aes(x = Año, y = PIB)) +\n        geom_point(col = \"red\") +\n        geom_smooth(method=\"glm\", method.args=list(family=gaussian(link=\"log\")))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n        labs(title = \"Evolución del PIB de Estados Unidos\", x = \"Año\", y = \"Logaritmo del PIB en billones dólares\")\n\n$x\n[1] \"Año\"\n\n$y\n[1] \"Logaritmo del PIB en billones dólares\"\n\n$title\n[1] \"Evolución del PIB de Estados Unidos\"\n\nattr(,\"class\")\n[1] \"labels\"\n\n\nEn este caso el ajuste no es perfecto, ya que es imposible que la recta pase por todos los puntos como ocurría en el ejercicio anterior. Por tanto, el ajuste es peor.\n\n\n\n¿Es el modelo de regresión exponencial un buen modelo para explicar la evolución del PIB?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ncat(paste(\"Coeficiente de determinación exponencial R²:\", summary(recta_logPIB_años)$r.squared))\n\nCoeficiente de determinación exponencial R²: 0.983487569858149\n\n\nComo el coeficiente de determinación lineal vale 0.9834876 que está bastante próximo a 1, el ajuste es bueno, y el modelo exponencial explica muy bien la evolución del PIB.\n\n\n\nUtilizar el modelo de regresión exponencial para predecir el PIB del año 2024. ¿Es fiable esta predicción?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nexp(predict.lm(recta_logPIB_años, newdata = list(Año = 2024)))\n\n      1 \n40486.8 \n\n\nLa predicción será fiable ya que el coeficiente de determinación está próximo a 1, el tamaño de la muestra no es muy pequeño y el año para el que se realiza la predicción no está lejos del rango de años de la muestra.\n\n\n\n¿Cuándo se alcanzará un PIB de 50000 billones de dólares?\n\n\n\n\n\n\nSolución\n\n\n\n\n\nComo ahora queremos predecir el año en el que se alcanzará el PIB dado, necesitamos construir el modelo de regresión de los años sobre el PIB. Como la relación entre el PIB y los años es exponencial, la relación entre los años y el PIB será la inversa, es decir, el modelo logarítmico.\n\nlog_años_PIB <- lm(Año ~ log(PIB), df) \nsummary(log_años_PIB)\n\n\nCall:\nlm(formula = Año ~ log(PIB), data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.4049 -2.5367  0.2662  1.7718  6.4965 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 1863.498      1.852 1006.29   <2e-16 ***\nlog(PIB)      15.068      0.227   66.39   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.857 on 74 degrees of freedom\nMultiple R-squared:  0.9835,    Adjusted R-squared:  0.9833 \nF-statistic:  4407 on 1 and 74 DF,  p-value: < 2.2e-16\n\n\nEl modelo de regresión logarítmico de los años sobre el PIB es \\(\\textsf{Año}= 1863.4980331 + 15.0677514 \\log(\\textsf{PIB})\\).\n\n\n\n\npredict.lm(log_años_PIB, newdata = list(PIB = 50000))\n\n       1 \n2026.528 \n\n\n\n\n\nEjercicio 5.5 El fichero dieta.csv contiene información sobre el los kilos perdidos con una dieta de adelgazamiento.\n\nCrear un data frame con los datos de la dieta a partir del fichero dieta.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(readr)\ndf <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/dieta.csv\")\n\nRows: 40 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): ejercicio\ndbl (2): dias, peso.perdido\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndf\n\n# A tibble: 40 × 3\n    dias peso.perdido ejercicio\n   <dbl>        <dbl> <chr>    \n 1    14         2.95 no       \n 2    18         5.65 no       \n 3    22         6.56 no       \n 4    26         3.56 no       \n 5    30         6.17 no       \n 6    34         9.4  no       \n 7    38        12.4  no       \n 8    42        12.9  no       \n 9    46        13.9  no       \n10    50        10.8  no       \n# ℹ 30 more rows\n\n\n\n\n\nDibujar el diagrama de dispersión de los kilos perdidos en función del número de días con la dieta. ¿Qué tipo de modelo de regresión se ajusta mejor a la nube de puntos?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(df, aes(x = dias, y = peso.perdido)) +\n    geom_point(col = \"red\") +\n    labs(title = \"Diagrama de dispersión del peso perdido y los días de dieta\", x = \"Días de dieta\", y = \"Peso perdido en Kg\")\n\n\n\n\nLa nube de puntos es bastante difusa aunque parece apreciarse una tendencia logarítmica o sigmoidal.\n\n\n\nCalcular el modelo de regresión sigmoidal del peso perdido sobre los días de dieta. ¿Es un buen modelo para explicar la relación entre el peso perdido y los días de dieta?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nsigmoidal_peso_dias <- lm(log(peso.perdido) ~ I(1/dias), df) \nsummary(sigmoidal_peso_dias)\n\n\nCall:\nlm(formula = log(peso.perdido) ~ I(1/dias), data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.83810 -0.17537  0.06906  0.17786  0.71841 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   3.09446    0.08819  35.088  < 2e-16 ***\nI(1/dias)   -25.65167    2.94543  -8.709 1.37e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2952 on 38 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6574 \nF-statistic: 75.85 on 1 and 38 DF,  p-value: 1.374e-10\n\n\nEl modelo de regresión sigmoidal que mejor explica el peso perdido en función de los días de dieta es \\(\\textsf{Peso}= e^{3.0944614 -25.6516729 / \\textsf{dias}}\\).\n\n\n\nDibujar el diagrama de dispersión de los kilos perdidos en función del número de días con la dieta según si la persona hace ejercicio o no. ¿Qué conclusiones se pueden sacar?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(ggplot2)\nggplot(df, aes(x = dias, y = peso.perdido, color = ejercicio)) +\n    geom_point() +\n    labs(title = \"Diagrama de dispersión del peso perdido y los días de dieta\", x = \"Días de dieta\", y = \"Peso perdido en Kg\")\n\n\n\n\nClaramente la nube de puntos de las personas que hacen ejercicio está por encima de la de los que no hacen ejercicio, lo que indica que hacer ejercicio favorece la pérdida de peso. Los más razonable es construir modelos de regresión para cada grupo.\n\n\n\nConstruir el modelo de regresión inverso del peso perdido sobre los días de dieta para los que hacen ejercicio y para los que no.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(broom)\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\ndf %>%\n    nest_by(ejercicio) %>%\n    mutate(mod = list(lm(peso.perdido ~ I(1/dias), data = data))) %>%\n    summarize(tidy(mod)) %>%\n    kable() %>%\n    kable_styling()\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'ejercicio'. You can override using the\n`.groups` argument.\n\n\n\n\n \n  \n    ejercicio \n    term \n    estimate \n    std.error \n    statistic \n    p.value \n  \n \n\n  \n    no \n    (Intercept) \n    14.92508 \n    0.8826746 \n    16.908927 \n    0.0e+00 \n  \n  \n    no \n    I(1/dias) \n    -182.19025 \n    29.4795388 \n    -6.180227 \n    7.8e-06 \n  \n  \n    si \n    (Intercept) \n    21.56554 \n    0.7652517 \n    28.180978 \n    0.0e+00 \n  \n  \n    si \n    I(1/dias) \n    -255.22492 \n    25.5578527 \n    -9.986164 \n    0.0e+00 \n  \n\n\n\n\n\n\n\n\n¿Han mejorado los modelos con respecto al hacer la regresión por grupos?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(broom)\nlibrary(kableExtra)\ndf %>%\n    nest_by(ejercicio) %>%\n    mutate(mod = list(lm(peso.perdido ~ I(1/dias), data = data))) %>%\n    summarize(glance(mod)) %>%\n    kable() %>%\n    kable_styling()\n\n`summarise()` has grouped output by 'ejercicio'. You can override using the\n`.groups` argument.\n\n\n\n\n \n  \n    ejercicio \n    r.squared \n    adj.r.squared \n    sigma \n    statistic \n    p.value \n    df \n    logLik \n    AIC \n    BIC \n    deviance \n    df.residual \n    nobs \n  \n \n\n  \n    no \n    0.6796880 \n    0.6618929 \n    2.089080 \n    38.19521 \n    7.8e-06 \n    1 \n    -42.05964 \n    90.11928 \n    93.10648 \n    78.55660 \n    18 \n    20 \n  \n  \n    si \n    0.8470993 \n    0.8386048 \n    1.811168 \n    99.72348 \n    0.0e+00 \n    1 \n    -39.20461 \n    84.40921 \n    87.39641 \n    59.04594 \n    18 \n    20 \n  \n\n\n\n\n\nEl modelo de regresión ha mejorado bastante en el grupo de los que hacen ejercicio ya que el coeficiente de determinación ha aumentado bastante."
  },
  {
    "objectID": "05-regresion.html#ejercicios-propuestos",
    "href": "05-regresion.html#ejercicios-propuestos",
    "title": "5  Regresión",
    "section": "5.2 Ejercicios propuestos",
    "text": "5.2 Ejercicios propuestos"
  }
]